package practica12;

import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import GraphicsBasico2D.Config;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import Image.KernelTypes;
import Image.ProductOp;
import Image.SepiaOp;
import Image.SobelOp;
import UI.ColorChooserButton.ColorChangedListener;
import sm.image.BlendOp;
import sm.image.Histogram;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SubtractionOp;
import sm.image.ThresholdOp;
import sm.image.TintOp;

/**
 * Esta clase representa a la ventana principal de la aplicación, es la que contiene
 * las barras de herramientas, el menú y que contienen ventanas internas (IntenalWindow)
 * 
 * @author Adri
 */
public class MainWindow extends javax.swing.JFrame
{
    // Almacenamiento temporal de la imagen para realizarle cambios
    private BufferedImage imgTmp;

    // Variables adicionales para la mezcla de imagenes
    private BufferedImage imgTmp2Blend;
    private InternalWindow blendedWindow;

    public int imageHeight = 300;
    public int imageWidth = 400;
    private int ndocument = 1; // aqui guardamos el numero de documento para el titulo

    /**
     * Creates new form VentanaPrincipal
     */
    public MainWindow()
    {
        initComponents();

        // Instanciamos aqu� el jButtonColorChooser ya que tiene que implementar el metodo colorChanged
        ((UI.ColorChooserButton) jButtonColorChooser).addColorChangedListener(new ColorChangedListener()
        {
            @Override
            public void colorChanged(Color newColor)
            {
                Config.GENERALCONFIG.setSelectedColor(newColor);
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroupTools = new javax.swing.ButtonGroup();
        jToolBarTools = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jToggleButtonPoint = new javax.swing.JToggleButton();
        jToggleButtonLine = new javax.swing.JToggleButton();
        jToggleButtonRectangle = new javax.swing.JToggleButton();
        jToggleButtonEllipse = new javax.swing.JToggleButton();
        jToggleButtonMove = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButtonColorChooser = new UI.ColorChooserButton(Color.BLACK);
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jSpinnerStroke = new javax.swing.JSpinner();
        jToggleButtonFillColor = new javax.swing.JToggleButton();
        jToggleButtonAntialiasing = new javax.swing.JToggleButton();
        jToggleButtonAlpha = new javax.swing.JToggleButton();
        jPanelCenter = new javax.swing.JPanel();
        desktop = new javax.swing.JDesktopPane();
        jToolBarImage = new javax.swing.JToolBar();
        jPanelImageBrightness = new javax.swing.JPanel();
        jSliderBrightness = new javax.swing.JSlider();
        jPanelImageFilter = new javax.swing.JPanel();
        jComboBoxFilter = new javax.swing.JComboBox<String>();
        jPanelImageContrast = new javax.swing.JPanel();
        jButtonConstrast = new javax.swing.JButton();
        jButtonConstrastBright = new javax.swing.JButton();
        jButtonContrastDark = new javax.swing.JButton();
        jPanelImageOperations = new javax.swing.JPanel();
        jButtonSinus = new javax.swing.JButton();
        jButtonSepia = new javax.swing.JButton();
        jButtonSobel = new javax.swing.JButton();
        jButtonTinted = new javax.swing.JButton();
        jPanelImageBinary = new javax.swing.JPanel();
        jButtonBinaryAdd = new javax.swing.JButton();
        jButtonBinarySubstract = new javax.swing.JButton();
        jButtonBinaryProduct = new javax.swing.JButton();
        jSliderBinaryOperations = new javax.swing.JSlider();
        jPanelUmbralization = new javax.swing.JPanel();
        jSliderUmbralization = new javax.swing.JSlider();
        jPanelStatusBar = new javax.swing.JPanel();
        jToolBarImageRotation = new javax.swing.JToolBar();
        jPanelImageRotate = new javax.swing.JPanel();
        jSliderRotate = new javax.swing.JSlider();
        jButtonRotate90 = new javax.swing.JButton();
        jButton180 = new javax.swing.JButton();
        jButtonRotate270 = new javax.swing.JButton();
        jPanelZoom = new javax.swing.JPanel();
        jButtonZoomMinus = new javax.swing.JButton();
        jButtonZoomPlus = new javax.swing.JButton();
        jStatusBarCursor = new javax.swing.JLabel();
        jStatusBarTool = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuPrint = new javax.swing.JMenu();
        jMenuItemPrinter = new javax.swing.JMenuItem();
        jMenuItemFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jCheckBoxMenuItemToolBar = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemToolBarImageOperations = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemToolBarImageRotation = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemStatusBar = new javax.swing.JCheckBoxMenuItem();
        jMenuImage = new javax.swing.JMenu();
        jMenuItemChangeSize = new javax.swing.JMenuItem();
        jMenuItemDuplicateImage = new javax.swing.JMenuItem();
        jMenuItemHistogram = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 500));

        jToolBarTools.setRollover(true);

        jButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_new.png"))); // NOI18N
        jButtonNew.setToolTipText("Nuevo");
        jButtonNew.setFocusable(false);
        jButtonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonNew);

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_open.png"))); // NOI18N
        jButtonOpen.setToolTipText("Abrir");
        jButtonOpen.setFocusable(false);
        jButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonOpen);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_save.png"))); // NOI18N
        jButtonSave.setToolTipText("Guardar");
        jButtonSave.setFocusable(false);
        jButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonSave);
        jToolBarTools.add(jSeparator3);

        jButtonGroupTools.add(jToggleButtonPoint);
        jToggleButtonPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_pencil.png"))); // NOI18N
        jToggleButtonPoint.setSelected(true);
        jToggleButtonPoint.setToolTipText("Punto");
        jToggleButtonPoint.setFocusable(false);
        jToggleButtonPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPointActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonPoint);

        jButtonGroupTools.add(jToggleButtonLine);
        jToggleButtonLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_line.png"))); // NOI18N
        jToggleButtonLine.setToolTipText("Linea");
        jToggleButtonLine.setFocusable(false);
        jToggleButtonLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonLineActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonLine);

        jButtonGroupTools.add(jToggleButtonRectangle);
        jToggleButtonRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_rectangle.png"))); // NOI18N
        jToggleButtonRectangle.setToolTipText("Rectangulo");
        jToggleButtonRectangle.setFocusable(false);
        jToggleButtonRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRectangleActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonRectangle);

        jButtonGroupTools.add(jToggleButtonEllipse);
        jToggleButtonEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_ellipse.png"))); // NOI18N
        jToggleButtonEllipse.setToolTipText("Elipse");
        jToggleButtonEllipse.setFocusable(false);
        jToggleButtonEllipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonEllipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonEllipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonEllipseActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonEllipse);

        jButtonGroupTools.add(jToggleButtonMove);
        jToggleButtonMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_move.png"))); // NOI18N
        jToggleButtonMove.setToolTipText("Mover");
        jToggleButtonMove.setFocusable(false);
        jToggleButtonMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMoveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonMove);
        jToolBarTools.add(jSeparator4);

        jButtonColorChooser.setToolTipText("Color");
        jButtonColorChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonColorChooser.setBorderPainted(false);
        jButtonColorChooser.setFocusable(false);
        jButtonColorChooser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonColorChooser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarTools.add(jButtonColorChooser);
        jToolBarTools.add(jSeparator5);

        jSpinnerStroke.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));
        jSpinnerStroke.setToolTipText("Grosor de linea");
        jSpinnerStroke.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerStroke, ""));
        jSpinnerStroke.setFocusable(false);
        jSpinnerStroke.setValue(1);
        jSpinnerStroke.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerStrokeStateChanged(evt);
            }
        });
        jToolBarTools.add(jSpinnerStroke);

        jToggleButtonFillColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_fill.png"))); // NOI18N
        jToggleButtonFillColor.setToolTipText("Rellenar");
        jToggleButtonFillColor.setFocusable(false);
        jToggleButtonFillColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonFillColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonFillColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonFillColorActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonFillColor);

        jToggleButtonAntialiasing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_antialiasing.png"))); // NOI18N
        jToggleButtonAntialiasing.setToolTipText("Suavizado");
        jToggleButtonAntialiasing.setFocusable(false);
        jToggleButtonAntialiasing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonAntialiasing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonAntialiasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAntialiasingActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonAntialiasing);

        jToggleButtonAlpha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_alpha.png"))); // NOI18N
        jToggleButtonAlpha.setToolTipText("Transparencia");
        jToggleButtonAlpha.setFocusable(false);
        jToggleButtonAlpha.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonAlpha.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonAlpha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAlphaActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonAlpha);

        getContentPane().add(jToolBarTools, java.awt.BorderLayout.PAGE_START);

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 994, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelCenter.add(desktop, java.awt.BorderLayout.CENTER);

        jToolBarImage.setRollover(true);
        jToolBarImage.setMinimumSize(new java.awt.Dimension(544, 90));
        jToolBarImage.setPreferredSize(new java.awt.Dimension(722, 80));

        jPanelImageBrightness.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        jPanelImageBrightness.setLayout(new java.awt.GridLayout(1, 0));

        jSliderBrightness.setMaximum(255);
        jSliderBrightness.setMinimum(-255);
        jSliderBrightness.setValue(0);
        jSliderBrightness.setPreferredSize(new java.awt.Dimension(70, 29));
        jSliderBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBrightnessStateChanged(evt);
            }
        });
        jSliderBrightness.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderBrightnessFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSliderBrightnessFocusLost(evt);
            }
        });
        jPanelImageBrightness.add(jSliderBrightness);

        jToolBarImage.add(jPanelImageBrightness);

        jPanelImageFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        jPanelImageFilter.setMinimumSize(new java.awt.Dimension(108, 70));
        jPanelImageFilter.setLayout(new java.awt.GridLayout(1, 0));

        jComboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--seleccione filtro--", "Emborronamiento media", "Emborronamiento binomial", "Enfoque", "Relieve", "Detector de fronteras laplaciano" }));
        jComboBoxFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFilterItemStateChanged(evt);
            }
        });
        jComboBoxFilter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxFilterFocusGained(evt);
            }
        });
        jComboBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterActionPerformed(evt);
            }
        });
        jPanelImageFilter.add(jComboBoxFilter);

        jToolBarImage.add(jPanelImageFilter);

        jPanelImageContrast.setBorder(javax.swing.BorderFactory.createTitledBorder("Constraste"));
        jPanelImageContrast.setMinimumSize(new java.awt.Dimension(96, 70));
        jPanelImageContrast.setLayout(new java.awt.GridLayout(1, 3));

        jButtonConstrast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_contrast.png"))); // NOI18N
        jButtonConstrast.setToolTipText("Constraste");
        jButtonConstrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConstrastActionPerformed(evt);
            }
        });
        jPanelImageContrast.add(jButtonConstrast);

        jButtonConstrastBright.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_bright.png"))); // NOI18N
        jButtonConstrastBright.setToolTipText("Brillante");
        jButtonConstrastBright.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConstrastBrightActionPerformed(evt);
            }
        });
        jPanelImageContrast.add(jButtonConstrastBright);

        jButtonContrastDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_dark.png"))); // NOI18N
        jButtonContrastDark.setToolTipText("Oscuro");
        jButtonContrastDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContrastDarkActionPerformed(evt);
            }
        });
        jPanelImageContrast.add(jButtonContrastDark);

        jToolBarImage.add(jPanelImageContrast);

        jPanelImageOperations.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones"));
        jPanelImageOperations.setPreferredSize(new java.awt.Dimension(158, 64));
        jPanelImageOperations.setLayout(new java.awt.GridLayout(1, 3));

        jButtonSinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_sinusoidal.png"))); // NOI18N
        jButtonSinus.setToolTipText("Seno");
        jButtonSinus.setAlignmentX(10.0F);
        jButtonSinus.setPreferredSize(new java.awt.Dimension(32, 32));
        jButtonSinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSinusActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonSinus);

        jButtonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_sepia.png"))); // NOI18N
        jButtonSepia.setToolTipText("Sepia");
        jButtonSepia.setPreferredSize(new java.awt.Dimension(32, 32));
        jButtonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSepiaActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonSepia);

        jButtonSobel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_gradient.png"))); // NOI18N
        jButtonSobel.setToolTipText("Gradiente Sobel");
        jButtonSobel.setPreferredSize(new java.awt.Dimension(32, 32));
        jButtonSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSobelActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonSobel);

        jButtonTinted.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_tinted.png"))); // NOI18N
        jButtonTinted.setToolTipText("Tintado");
        jButtonTinted.setPreferredSize(new java.awt.Dimension(32, 32));
        jButtonTinted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTintedActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonTinted);

        jToolBarImage.add(jPanelImageOperations);

        jPanelImageBinary.setBorder(javax.swing.BorderFactory.createTitledBorder("Binarias"));
        java.awt.GridBagLayout jPanelImageBinaryLayout = new java.awt.GridBagLayout();
        jPanelImageBinaryLayout.columnWidths = new int[] {10, 10, 10};
        jPanelImageBinaryLayout.rowHeights = new int[] {1};
        jPanelImageBinary.setLayout(jPanelImageBinaryLayout);

        jButtonBinaryAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_add.png"))); // NOI18N
        jButtonBinaryAdd.setToolTipText("suma binaria");
        jButtonBinaryAdd.setMaximumSize(new java.awt.Dimension(20, 28));
        jButtonBinaryAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonBinaryAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonBinaryAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinaryAddActionPerformed(evt);
            }
        });
        jPanelImageBinary.add(jButtonBinaryAdd, new java.awt.GridBagConstraints());

        jButtonBinarySubstract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_substract.png"))); // NOI18N
        jButtonBinarySubstract.setToolTipText("resta binaria");
        jButtonBinarySubstract.setPreferredSize(new java.awt.Dimension(24, 10));
        jButtonBinarySubstract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinarySubstractActionPerformed(evt);
            }
        });
        jPanelImageBinary.add(jButtonBinarySubstract, new java.awt.GridBagConstraints());

        jButtonBinaryProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_product.png"))); // NOI18N
        jButtonBinaryProduct.setToolTipText("multiplicacion binaria");
        jButtonBinaryProduct.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonBinaryProduct.setMaximumSize(new java.awt.Dimension(20, 28));
        jButtonBinaryProduct.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonBinaryProduct.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonBinaryProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinaryProductActionPerformed(evt);
            }
        });
        jPanelImageBinary.add(jButtonBinaryProduct, new java.awt.GridBagConstraints());

        jSliderBinaryOperations.setPreferredSize(new java.awt.Dimension(80, 29));
        jSliderBinaryOperations.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBinaryOperationsStateChanged(evt);
            }
        });
        jSliderBinaryOperations.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderBinaryOperationsFocusGained(evt);
            }
        });
        jSliderBinaryOperations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jSliderBinaryOperationsMouseExited(evt);
            }
        });
        jPanelImageBinary.add(jSliderBinaryOperations, new java.awt.GridBagConstraints());

        jToolBarImage.add(jPanelImageBinary);

        jPanelUmbralization.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizacion"));
        jPanelUmbralization.setLayout(new java.awt.GridLayout(1, 0));

        jSliderUmbralization.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderUmbralizationStateChanged(evt);
            }
        });
        jSliderUmbralization.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderUmbralizationFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSliderUmbralizationFocusLost(evt);
            }
        });
        jPanelUmbralization.add(jSliderUmbralization);

        jToolBarImage.add(jPanelUmbralization);

        jPanelCenter.add(jToolBarImage, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelStatusBar.setLayout(new java.awt.BorderLayout());

        jToolBarImageRotation.setRollover(true);

        jPanelImageRotate.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        jPanelImageRotate.setPreferredSize(new java.awt.Dimension(300, 62));
        jPanelImageRotate.setLayout(new java.awt.GridLayout(1, 4));

        jSliderRotate.setMaximum(360);
        jSliderRotate.setMinorTickSpacing(90);
        jSliderRotate.setPaintTicks(true);
        jSliderRotate.setValue(0);
        jSliderRotate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderRotateStateChanged(evt);
            }
        });
        jSliderRotate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderRotateFocusGained(evt);
            }
        });
        jPanelImageRotate.add(jSliderRotate);

        jButtonRotate90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_rotate_90.png"))); // NOI18N
        jButtonRotate90.setToolTipText("90 Grados");
        jButtonRotate90.setFocusable(false);
        jButtonRotate90.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRotate90.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRotate90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRotate90ActionPerformed(evt);
            }
        });
        jPanelImageRotate.add(jButtonRotate90);

        jButton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_rotate_180.png"))); // NOI18N
        jButton180.setToolTipText("180 Grados");
        jButton180.setFocusable(false);
        jButton180.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton180.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton180ActionPerformed(evt);
            }
        });
        jPanelImageRotate.add(jButton180);

        jButtonRotate270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_rotate_270.png"))); // NOI18N
        jButtonRotate270.setToolTipText("270 Grados");
        jButtonRotate270.setFocusable(false);
        jButtonRotate270.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRotate270.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRotate270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRotate270ActionPerformed(evt);
            }
        });
        jPanelImageRotate.add(jButtonRotate270);

        jToolBarImageRotation.add(jPanelImageRotate);

        jPanelZoom.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        jPanelZoom.setLayout(new java.awt.GridLayout(1, 0));

        jButtonZoomMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_zoom_minus.png"))); // NOI18N
        jButtonZoomMinus.setToolTipText("Reducir");
        jButtonZoomMinus.setFocusable(false);
        jButtonZoomMinus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonZoomMinus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonZoomMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZoomMinusActionPerformed(evt);
            }
        });
        jPanelZoom.add(jButtonZoomMinus);

        jButtonZoomPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_zoom_plus.png"))); // NOI18N
        jButtonZoomPlus.setToolTipText("Ampliar");
        jButtonZoomPlus.setFocusable(false);
        jButtonZoomPlus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonZoomPlus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonZoomPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZoomPlusActionPerformed(evt);
            }
        });
        jPanelZoom.add(jButtonZoomPlus);

        jToolBarImageRotation.add(jPanelZoom);

        jPanelStatusBar.add(jToolBarImageRotation, java.awt.BorderLayout.NORTH);

        jStatusBarCursor.setText("(x,y)");
        jStatusBarCursor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelStatusBar.add(jStatusBarCursor, java.awt.BorderLayout.EAST);

        jStatusBarTool.setText("Barra Estado");
        jStatusBarTool.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelStatusBar.add(jStatusBarTool, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanelStatusBar, java.awt.BorderLayout.SOUTH);

        jMenuFile.setText("Archivo");

        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        jMenuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_new.png"))); // NOI18N
        jMenuItemNew.setText("Nuevo");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_open.png"))); // NOI18N
        jMenuOpen.setText("Abrir");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuOpen);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        jMenuSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_save.png"))); // NOI18N
        jMenuSave.setText("Guardar");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuSave);
        jMenuFile.add(jSeparator2);

        jMenuPrint.setText("Imprimir");

        jMenuItemPrinter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_print.png"))); // NOI18N
        jMenuItemPrinter.setText("Impresora");
        jMenuPrint.add(jMenuItemPrinter);

        jMenuItemFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_open.png"))); // NOI18N
        jMenuItemFile.setText("Fichero");
        jMenuPrint.add(jMenuItemFile);

        jMenuFile.add(jMenuPrint);
        jMenuFile.add(jSeparator1);

        jMenuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_exit.png"))); // NOI18N
        jMenuItemExit.setText("Salir");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Editar");

        jMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_MASK));
        jMenuItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_cut.png"))); // NOI18N
        jMenuItemCut.setText("Cortar");
        jMenuEdit.add(jMenuItemCut);

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        jMenuItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_copy.png"))); // NOI18N
        jMenuItemCopy.setText("Copiar");
        jMenuEdit.add(jMenuItemCopy);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        jMenuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica12/images/icon_paste.png"))); // NOI18N
        jMenuItemPaste.setText("Pegar");
        jMenuEdit.add(jMenuItemPaste);

        jMenuBar.add(jMenuEdit);

        jMenuView.setText("Ver");

        jCheckBoxMenuItemToolBar.setSelected(true);
        jCheckBoxMenuItemToolBar.setText("Barra de herramientas");
        jCheckBoxMenuItemToolBar.setToolTipText("");
        jCheckBoxMenuItemToolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBar);

        jCheckBoxMenuItemToolBarImageOperations.setSelected(true);
        jCheckBoxMenuItemToolBarImageOperations.setText("Barra de imagen");
        jCheckBoxMenuItemToolBarImageOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarImageOperationsActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBarImageOperations);

        jCheckBoxMenuItemToolBarImageRotation.setSelected(true);
        jCheckBoxMenuItemToolBarImageRotation.setText("Barra de rotacion y escalado");
        jCheckBoxMenuItemToolBarImageRotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarImageRotationActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBarImageRotation);

        jCheckBoxMenuItemStatusBar.setSelected(true);
        jCheckBoxMenuItemStatusBar.setText("Barra de estado");
        jCheckBoxMenuItemStatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemStatusBarActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemStatusBar);

        jMenuBar.add(jMenuView);

        jMenuImage.setText("Imagen");

        jMenuItemChangeSize.setText("Cambiar tamaño");
        jMenuItemChangeSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChangeSizeActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemChangeSize);

        jMenuItemDuplicateImage.setText("Duplicar imagen");
        jMenuItemDuplicateImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDuplicateImageActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemDuplicateImage);

        jMenuItemHistogram.setText("Histograma");
        jMenuItemHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistogramActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemHistogram);

        jMenuBar.add(jMenuImage);

        jMenuHelp.setText("Ayuda");

        jMenuItemHelpAbout.setText("Acerca de...");
        jMenuItemHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelpAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        // TODO add your handling code here:

        InternalWindow vi = new InternalWindow();

        // Truquillo para mostrar las ventanas en cascada, le sumamos 25 pixeles a la nueva
        InternalWindow selectedWindow = (InternalWindow) this.desktop.getSelectedFrame();
        if (selectedWindow != null)
            vi.setLocation(selectedWindow.getX() + 25, selectedWindow.getY() + 25);

        vi.setParent(this);
        desktop.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nueva imagen " + String.valueOf(this.ndocument));

        this.ndocument++;

        BufferedImage img = new BufferedImage(this.imageWidth, this.imageHeight, BufferedImage.TYPE_INT_ARGB);

        // le ponemos el color blanco (si no saldr�a negra)
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, img.getWidth(), img.getHeight()));

        vi.getCanvas().setImage(img);


    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        // TODO add your handling code here:

        JFileChooser dlg = new JFileChooser();

//        dlg.setFileFilter(new FileNameExtensionFilter("Imagen GIF (*.gif)", "gif"));
//        dlg.setFileFilter(new FileNameExtensionFilter("Imagen PNG (*.png)", "png"));
//        dlg.setFileFilter(new FileNameExtensionFilter("Imagen JPEG (*.jpg, *.jpeg)", "jpg", "jpeg"));
        dlg.setFileFilter(new FileNameExtensionFilter("Todos los tipos de imagenes (*.jpg, *.jpeg, *.png, *.gif)", "jpg", "jpeg", "png", "gif"));
        dlg.setFileFilter(new FileNameExtensionFilter("Ficheros de audio (*.wav)", "wav"));

        
        dlg.setAcceptAllFileFilterUsed(false);

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION)
        {
            File f = dlg.getSelectedFile();
            
            InternalWindow vi = new InternalWindow();
            vi.setParent(this);
            desktop.add(vi);
            vi.setVisible(true);

            BufferedImage img;
            try
            {
                img = ImageIO.read(f);
                vi.getCanvas().setImage(img);
                vi.setTitle(f.getName());
            } catch (IOException ex)
            {
                JOptionPane.showMessageDialog(null, "Error al abrir la imagen");
            }          
                        
        }


    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed

        InternalWindow vi = (InternalWindow) desktop.getSelectedFrame();

        if (vi != null)
        {
            JFileChooser dlg = new JFileChooser();

            // Establecemos como nombre del fichero el nombre de la ventana
            dlg.setSelectedFile(new File(vi.getTitle()));

            dlg.setFileFilter(new FileNameExtensionFilter("Imagen GIF (*.gif)", "gif"));
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen PNG (*.png)", "png"));
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen JPEG (*.jpg)", "jpg"));

            dlg.setAcceptAllFileFilterUsed(false);

            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION)

                try
                {
                    BufferedImage img = vi.getCanvas().getImage(true);
                    if (img != null)
                    {
                        File f = getSelectedFileWithExtension(dlg);

                        String filename = f.getName();
                        String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());

                        // Comprobamos que le hayamos dado exteni�n y sea de las soportadas
                        if (extension.length() == 0 || !("jpg".equals(extension) || "png".equals(extension) || "gif".equals(extension)))
                        {
                            // si no le ponemos fijo el formato jpg
                            extension = "jpg";
                            f = new File(f.getAbsoluteFile() + ".jpg");
                        }

                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                    }
                } catch (Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Error al guardar la imagen");
                }
        }

    }//GEN-LAST:event_jMenuSaveActionPerformed

    /**
     * Obtiene el archivo seleccionado con la extensi�n del filter
     *
     * @param c la instancia del filechooser
     * @return El nombre del fichero
     */
    public File getSelectedFileWithExtension(JFileChooser c)
    {
        File file = c.getSelectedFile();
        if (c.getFileFilter() instanceof FileNameExtensionFilter)
        {
            String[] exts = ((FileNameExtensionFilter) c.getFileFilter()).getExtensions();
            String nameLower = file.getName().toLowerCase();
            for (String ext : exts) // check if it already has a valid extension

                if (nameLower.endsWith('.' + ext.toLowerCase()))
                    return file; // if yes, return as-is
            // if not, append the first extension from the selected filter
            file = new File(file.toString() + '.' + exts[0]);
        }
        return file;
    }

    private void jCheckBoxMenuItemStatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemStatusBarActionPerformed
        this.jStatusBarTool.setVisible(jCheckBoxMenuItemStatusBar.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemStatusBarActionPerformed

    private void jToggleButtonPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPointActionPerformed

        Config.GENERALCONFIG.setSelectedTool(Config.Tool.POINT);
        this.jStatusBarTool.setText("Punto");
    }//GEN-LAST:event_jToggleButtonPointActionPerformed

    private void jToggleButtonLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonLineActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.LINE);
        this.jStatusBarTool.setText("Linea");
    }//GEN-LAST:event_jToggleButtonLineActionPerformed

    private void jToggleButtonRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRectangleActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.RECTANGLE);
        this.jStatusBarTool.setText("Rectangulo");
    }//GEN-LAST:event_jToggleButtonRectangleActionPerformed

    private void jToggleButtonEllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonEllipseActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.ELLIPSE);
        this.jStatusBarTool.setText("Elipse");
    }//GEN-LAST:event_jToggleButtonEllipseActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jToggleButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMoveActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.HAND);
        this.jStatusBarTool.setText("Mover");
    }//GEN-LAST:event_jToggleButtonMoveActionPerformed

    private void jSpinnerStrokeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerStrokeStateChanged
        Config.GENERALCONFIG.setStroke((Integer) (jSpinnerStroke.getValue()));
    }//GEN-LAST:event_jSpinnerStrokeStateChanged

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        this.jMenuItemNewActionPerformed(evt);
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        this.jMenuOpenActionPerformed(evt);
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        this.jMenuSaveActionPerformed(evt);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jToggleButtonFillColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonFillColorActionPerformed
        Config.GENERALCONFIG.setFillColor(jToggleButtonFillColor.isSelected());
    }//GEN-LAST:event_jToggleButtonFillColorActionPerformed

    private void jCheckBoxMenuItemToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemToolBarActionPerformed
        this.jToolBarTools.setVisible(jCheckBoxMenuItemToolBar.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemToolBarActionPerformed

    private void jToggleButtonAntialiasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAntialiasingActionPerformed
        Config.GENERALCONFIG.setAntialiasing(jToggleButtonAntialiasing.isSelected());
        this.repaint();
    }//GEN-LAST:event_jToggleButtonAntialiasingActionPerformed

    private void jToggleButtonAlphaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAlphaActionPerformed
        Config.GENERALCONFIG.setAlpha(jToggleButtonAlpha.isSelected());
        this.repaint();
    }//GEN-LAST:event_jToggleButtonAlphaActionPerformed

    private void jMenuItemChangeSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChangeSizeActionPerformed

        JFrame sizeWindow = new SizeWindow(this, this.imageHeight, this.imageWidth);
        sizeWindow.setVisible(true);

    }//GEN-LAST:event_jMenuItemChangeSizeActionPerformed

    private void jSliderBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBrightnessStateChanged

        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();

        if (vi != null && this.imgTmp != null)
            try
            {
                RescaleOp rop;
                if (this.imgTmp.getColorModel().hasAlpha())
                {
                    float[] scales = new float[]
                    {
                        1.0f, 1.0f, 1.0f, 1.0f
                    };
                    float vBrillo = this.jSliderBrightness.getValue();
                    float[] offsets = new float[]
                    {
                        vBrillo, vBrillo, vBrillo, 0.0f
                    };
                    rop = new RescaleOp(scales, offsets, null);
                } else
                    rop = new RescaleOp(1.0f, this.jSliderBrightness.getValue(), null);
                BufferedImage imgdest = rop.filter(this.imgTmp, null);
                vi.getCanvas().setImage(imgdest);
                vi.getCanvas().repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jSliderBrightnessStateChanged

    private void jComboBoxFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxFilterItemStateChanged


    }//GEN-LAST:event_jComboBoxFilterItemStateChanged

    private void jSliderBrightnessFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBrightnessFocusGained

        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();

        if (vi != null)
            this.imgTmp = vi.getCanvas().getImage(true);

    }//GEN-LAST:event_jSliderBrightnessFocusGained

    private void jSliderBrightnessFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBrightnessFocusLost
        this.imgTmp = null;
        this.jSliderBrightness.setValue(0);
    }//GEN-LAST:event_jSliderBrightnessFocusLost

    private void jComboBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterActionPerformed

        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            this.imgTmp = vi.getCanvas().getImage(true);
            if (this.imgTmp != null)
                try
                {

                    KernelTypes kt = null; // por inicializarlo con algo

                    switch (this.jComboBoxFilter.getSelectedIndex())
                    {
                        case 0: // --seleccione--
                            break;
                        case 1: // Emborronamiento media
                            kt = KernelTypes.MEDIA;
                            break;
                        case 2: // Emborronamiento binomial
                            kt = KernelTypes.BINOMIAL;
                            break;
                        case 3: // Emborronamiento Enfoque
                            kt = KernelTypes.ENFOQUE;
                            break;
                        case 4: // Relieve
                            kt = KernelTypes.RELIEVE;
                            break;
                        case 5: // Detector de fronteras laplaciano
                            kt = KernelTypes.LAPLACIANA;
                            break;

                    }

                    if (kt != null)
                    {
                        Kernel k = KernelProducer.createKernel(kt.value);
                        ConvolveOp cop = new ConvolveOp(k, 1, null);
                        BufferedImage imgDest = cop.filter(this.imgTmp, null);
                        vi.getCanvas().setImage(imgDest);
                        vi.getCanvas().repaint();
                    }

                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }


    }//GEN-LAST:event_jComboBoxFilterActionPerformed

    private void jComboBoxFilterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxFilterFocusGained

        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();

        if (vi != null)
            this.imgTmp = vi.getCanvas().getImage(true);

    }//GEN-LAST:event_jComboBoxFilterFocusGained

    private void jButtonConstrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConstrastActionPerformed
        this.setContrast(LookupTableProducer.TYPE_SFUNCION);
    }//GEN-LAST:event_jButtonConstrastActionPerformed

    private void jButtonConstrastBrightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConstrastBrightActionPerformed
        this.setContrast(LookupTableProducer.TYPE_ROOT);
    }//GEN-LAST:event_jButtonConstrastBrightActionPerformed

    private void jButtonContrastDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContrastDarkActionPerformed
        this.setContrast(LookupTableProducer.TYPE_POWER);
    }//GEN-LAST:event_jButtonContrastDarkActionPerformed

    private void jSliderRotateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderRotateFocusGained
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();

        if (vi != null)
            this.imgTmp = vi.getCanvas().getImage(true);
    }//GEN-LAST:event_jSliderRotateFocusGained

    private void jSliderRotateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderRotateStateChanged
        this.rotate(this.jSliderRotate.getValue());
    }//GEN-LAST:event_jSliderRotateStateChanged

    private void jButtonRotate90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRotate90ActionPerformed
        this.rotate(90);
    }//GEN-LAST:event_jButtonRotate90ActionPerformed

    private void jButton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton180ActionPerformed
        this.rotate(180);
    }//GEN-LAST:event_jButton180ActionPerformed

    private void jButtonRotate270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRotate270ActionPerformed
        this.rotate(270);
    }//GEN-LAST:event_jButtonRotate270ActionPerformed

    private void jButtonZoomMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZoomMinusActionPerformed
        this.scale(0.75);
    }//GEN-LAST:event_jButtonZoomMinusActionPerformed

    private void jButtonZoomPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZoomPlusActionPerformed
        this.scale(1.25);
    }//GEN-LAST:event_jButtonZoomPlusActionPerformed

    private void jMenuItemHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpAboutActionPerformed
        String msg = "<html><body><p>UGR - Sistemas Multimedia</p><p>2016 - Adrián Portillo Sánchez <a href='mailto:adri95cadiz@correo.ugr.es'>adri95cadiz@correo.ugr.es</a></p></body></html>";
        JOptionPane.showMessageDialog(this, msg, "Acerca de...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemHelpAboutActionPerformed

    private void jCheckBoxMenuItemToolBarImageOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemToolBarImageOperationsActionPerformed
        this.jToolBarImage.setVisible(jCheckBoxMenuItemToolBarImageOperations.getState());

    }//GEN-LAST:event_jCheckBoxMenuItemToolBarImageOperationsActionPerformed

    private void jButtonSinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSinusActionPerformed
        BufferedImage imgSource;
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                LookupTable lt = this.sinus(180);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonSinusActionPerformed

    private void jMenuItemDuplicateImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDuplicateImageActionPerformed

        InternalWindow vi = new InternalWindow();

        // Truquillo para mostrar las ventanas en cascada, le sumamos 25 pixeles a la nueva
        InternalWindow selectedWindow = (InternalWindow) this.desktop.getSelectedFrame();
        if (selectedWindow != null)
        {

            vi.setLocation(selectedWindow.getX() + 25, selectedWindow.getY() + 25);

            vi.setParent(this);
            desktop.add(vi);
            vi.setVisible(true);
            vi.setTitle("Copia de " + selectedWindow.getTitle());

            BufferedImage img = selectedWindow.getCanvas().getImage(true);

            vi.getCanvas().setImage(img);

        }


    }//GEN-LAST:event_jMenuItemDuplicateImageActionPerformed

    private void jButtonBinaryAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinaryAddActionPerformed

        InternalWindow vi = (InternalWindow) (this.desktop.getSelectedFrame());
        if (vi != null)
        {
            InternalWindow viNext = (InternalWindow) this.desktop.selectFrame(false);
            if (viNext != null)
            {
                BufferedImage imgRight = vi.getCanvas().getImage(false);
                BufferedImage imgLeft = viNext.getCanvas().getImage(false);
                if (imgRight != null && imgLeft != null)
                    try
                    {
                        BlendOp op = new BlendOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new InternalWindow();
                        vi.setParent(this);
                        vi.getCanvas().setImage(imgdest);
                        this.desktop.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e)
                    {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
            }
        }
    }//GEN-LAST:event_jButtonBinaryAddActionPerformed

    private void jButtonBinarySubstractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinarySubstractActionPerformed

        InternalWindow vi = (InternalWindow) (this.desktop.getSelectedFrame());
        if (vi != null)
        {
            InternalWindow viNext = (InternalWindow) this.desktop.selectFrame(false);
            if (viNext != null)
            {
                BufferedImage imgRight = vi.getCanvas().getImage(false);
                BufferedImage imgLeft = viNext.getCanvas().getImage(false);
                if (imgRight != null && imgLeft != null)
                    try
                    {
                        SubtractionOp op = new SubtractionOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new InternalWindow();
                        vi.setParent(this);
                        vi.getCanvas().setImage(imgdest);
                        this.desktop.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e)
                    {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
            }
        }
    }//GEN-LAST:event_jButtonBinarySubstractActionPerformed

    private void jSliderUmbralizationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderUmbralizationFocusGained
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        this.imgTmp = vi != null ? vi.getCanvas().getImage(true) : null;
    }//GEN-LAST:event_jSliderUmbralizationFocusGained

    private void jSliderUmbralizationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderUmbralizationFocusLost
        this.imgTmp = null;
        this.jSliderUmbralization.setValue(128);
    }//GEN-LAST:event_jSliderUmbralizationFocusLost

    private void jSliderUmbralizationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderUmbralizationStateChanged
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null && this.imgTmp != null)
            try
            {
                int umbral = this.jSliderUmbralization.getValue();
                ThresholdOp top = new ThresholdOp(umbral);
                BufferedImage imgdest = top.filter(this.imgTmp, null);
                vi.getCanvas().setImage(imgdest);
                vi.getCanvas().repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jSliderUmbralizationStateChanged

    private void jButtonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSepiaActionPerformed
        BufferedImage imgSource;
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                SepiaOp sepia = new SepiaOp();
                sepia.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonSepiaActionPerformed

    private void jButtonSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSobelActionPerformed

        BufferedImage imgSource;
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                SobelOp sobel = new SobelOp();
                sobel.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonSobelActionPerformed

    private void jButtonBinaryProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinaryProductActionPerformed

        InternalWindow vi = (InternalWindow) (this.desktop.getSelectedFrame());
        if (vi != null)
        {
            InternalWindow viNext = (InternalWindow) this.desktop.selectFrame(false);
            if (viNext != null)
            {
                BufferedImage imgRight = vi.getCanvas().getImage(false);
                BufferedImage imgLeft = viNext.getCanvas().getImage(false);
                if (imgRight != null && imgLeft != null)
                    try
                    {
                        ProductOp op = new ProductOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new InternalWindow();
                        vi.setParent(this);
                        vi.getCanvas().setImage(imgdest);
                        this.desktop.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e)
                    {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
            }
        }

    }//GEN-LAST:event_jButtonBinaryProductActionPerformed

    private void jMenuItemHistogramActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemHistogramActionPerformed
    {//GEN-HEADEREND:event_jMenuItemHistogramActionPerformed

        InternalWindow vi = (InternalWindow) (this.desktop.getSelectedFrame());
        if (vi != null)
        {

            BufferedImage img = vi.getCanvas().getImage(true);

            Histogram hist = new Histogram(img);

            System.out.println("Histograma: (deberiamos pintar un nuevo lienzo con puntos)");
            System.out.print(Arrays.deepToString(hist.getNormalizedHistogram()));

        }


    }//GEN-LAST:event_jMenuItemHistogramActionPerformed

    private void jSliderBinaryOperationsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSliderBinaryOperationsStateChanged
    {//GEN-HEADEREND:event_jSliderBinaryOperationsStateChanged

        if (this.blendedWindow != null)
        {
            float alfa = (float) this.jSliderBinaryOperations.getValue() / 100.0f;

            if (this.imgTmp != null && this.imgTmp2Blend != null)
            {
                BlendOp op = new BlendOp(this.imgTmp, alfa);

                BufferedImage imgdest = op.filter(this.imgTmp2Blend, null);

                this.blendedWindow.getCanvas().setImage(imgdest);
                this.blendedWindow.getCanvas().repaint();
                this.blendedWindow.setVisible(true);

            }
        }


    }//GEN-LAST:event_jSliderBinaryOperationsStateChanged

    private void jSliderBinaryOperationsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jSliderBinaryOperationsFocusGained
    {//GEN-HEADEREND:event_jSliderBinaryOperationsFocusGained
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        InternalWindow viNext = (InternalWindow) this.desktop.selectFrame(false);

        if (vi != null && viNext != null)
        {

            this.blendedWindow = new InternalWindow();
            this.blendedWindow.setParent(this);
            this.blendedWindow.setLocation(vi.getX() + 25, vi.getY() + 25);

            this.blendedWindow.setTitle("Imagenes mezcladas");
            this.desktop.add(this.blendedWindow);
            
            this.imgTmp = vi.getCanvas().getImage(true);
            this.imgTmp2Blend = viNext.getCanvas().getImage(true);

        }

    }//GEN-LAST:event_jSliderBinaryOperationsFocusGained

    private void jSliderBinaryOperationsMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderBinaryOperationsMouseExited
    {//GEN-HEADEREND:event_jSliderBinaryOperationsMouseExited
        this.imgTmp = null;
        this.imgTmp2Blend = null;
        this.blendedWindow = null;

    }//GEN-LAST:event_jSliderBinaryOperationsMouseExited

    private void jButtonTintedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonTintedActionPerformed
    {//GEN-HEADEREND:event_jButtonTintedActionPerformed
        BufferedImage imgSource;
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                TintOp tint = new TintOp(Color.BLUE, 0.5f);
                tint.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonTintedActionPerformed

    private void jCheckBoxMenuItemToolBarImageRotationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxMenuItemToolBarImageRotationActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxMenuItemToolBarImageRotationActionPerformed
        this.jToolBarImageRotation.setVisible(jCheckBoxMenuItemToolBarImageRotation.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemToolBarImageRotationActionPerformed

    private void setContrast(int type)
    {
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();

        if (vi != null)
        {
            BufferedImage imgSource = vi.getCanvas().getImage(false);
            if (imgSource != null)
                try
                {
                    LookupTable lt = LookupTableProducer.createLookupTable(type);

                    LookupOp lop = new LookupOp(lt, null);

                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }

        }

    }

    private void scale(double scaleFactor)
    {
        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            BufferedImage imgSource = vi.getCanvas().getImage(true);;
            if (imgSource == null)
                imgSource = vi.getCanvas().getImage(true);
            if (imgSource != null)
                try
                {
                    AffineTransform at = AffineTransform.getScaleInstance(scaleFactor, scaleFactor);
                    AffineTransformOp atop = new AffineTransformOp(at, 2);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getCanvas().setImage(imgdest);
                    vi.getCanvas().repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }
    }

    private void rotate(int angle)
    {

        InternalWindow vi = (InternalWindow) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            double radians = Math.toRadians(angle);

            if (this.imgTmp == null)
                this.imgTmp = vi.getCanvas().getImage(true);
            if (this.imgTmp != null)
                try
                {
                    AffineTransform at = AffineTransform.getRotateInstance(radians, this.imgTmp.getWidth() / 2, this.imgTmp.getHeight() / 2);
                    AffineTransformOp atop = new AffineTransformOp(at, 2);
                    BufferedImage imgdest = atop.filter(this.imgTmp, null);
                    vi.getCanvas().setImage(imgdest);
                    vi.getCanvas().repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }
    }

    /**
     * Funcion que calcula el seno
     * @param w
     * @return 
     */
    private LookupTable sinus(double w)
    {
        double K = 255.0; // Cte de normalizacio?n
        // Co?digo implementado f(x)=|sin(wx)|

        byte[] lt = new byte[256];
        for (int i = 0; i < 256; ++i)
            lt[i] = (byte)Math.abs(K * Math.sin( w * i ));
        
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Pintal la posici�n del cursor en la barra de estado
     * @param text texto con la informaci�n a pintar
     */
    public void setCursorPosition(String text)
    {
        this.jStatusBarCursor.setText(text);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton jButton180;
    private javax.swing.JButton jButtonBinaryAdd;
    private javax.swing.JButton jButtonBinaryProduct;
    private javax.swing.JButton jButtonBinarySubstract;
    private javax.swing.JButton jButtonColorChooser;
    private javax.swing.JButton jButtonConstrast;
    private javax.swing.JButton jButtonConstrastBright;
    private javax.swing.JButton jButtonContrastDark;
    private javax.swing.ButtonGroup jButtonGroupTools;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonRotate270;
    private javax.swing.JButton jButtonRotate90;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSepia;
    private javax.swing.JButton jButtonSinus;
    private javax.swing.JButton jButtonSobel;
    private javax.swing.JButton jButtonTinted;
    private javax.swing.JButton jButtonZoomMinus;
    private javax.swing.JButton jButtonZoomPlus;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemStatusBar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBarImageOperations;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBarImageRotation;
    private javax.swing.JComboBox<String> jComboBoxFilter;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemChangeSize;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemDuplicateImage;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemFile;
    private javax.swing.JMenuItem jMenuItemHelpAbout;
    private javax.swing.JMenuItem jMenuItemHistogram;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemPrinter;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JMenu jMenuPrint;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelImageBinary;
    private javax.swing.JPanel jPanelImageBrightness;
    private javax.swing.JPanel jPanelImageContrast;
    private javax.swing.JPanel jPanelImageFilter;
    private javax.swing.JPanel jPanelImageOperations;
    private javax.swing.JPanel jPanelImageRotate;
    private javax.swing.JPanel jPanelStatusBar;
    private javax.swing.JPanel jPanelUmbralization;
    private javax.swing.JPanel jPanelZoom;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JSlider jSliderBinaryOperations;
    private javax.swing.JSlider jSliderBrightness;
    private javax.swing.JSlider jSliderRotate;
    private javax.swing.JSlider jSliderUmbralization;
    private javax.swing.JSpinner jSpinnerStroke;
    private javax.swing.JLabel jStatusBarCursor;
    private javax.swing.JLabel jStatusBarTool;
    private javax.swing.JToggleButton jToggleButtonAlpha;
    private javax.swing.JToggleButton jToggleButtonAntialiasing;
    private javax.swing.JToggleButton jToggleButtonEllipse;
    private javax.swing.JToggleButton jToggleButtonFillColor;
    private javax.swing.JToggleButton jToggleButtonLine;
    private javax.swing.JToggleButton jToggleButtonMove;
    private javax.swing.JToggleButton jToggleButtonPoint;
    private javax.swing.JToggleButton jToggleButtonRectangle;
    private javax.swing.JToolBar jToolBarImage;
    private javax.swing.JToolBar jToolBarImageRotation;
    private javax.swing.JToolBar jToolBarTools;
    // End of variables declaration//GEN-END:variables
}