/*
 * Copyright (C) 2017 Adri
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package sm;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Timer;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;

/**
 * @author adri
 * Muestra una ventana con el reproductor de audio
 */
public class InternalWindowAudioPlayer extends javax.swing.JInternalFrame
{
    SMPlayer player;
    private Timer timer;
    int durationInMiliSeconds;
    
    /**
     * Creates new form InternalWindowAudioPlayer
     * @param f el fichero a reproducir
     */
    public InternalWindowAudioPlayer(File f)
    {
        initComponents();
        player = new SMClipPlayer(f);
        
        
        // Obtenemos la duraci√≥n del audio
        try
        {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(f);
            AudioFormat format = audioInputStream.getFormat();
            long frames = audioInputStream.getFrameLength();
            this.durationInMiliSeconds = 1000 * (int) ((frames+0.0) / format.getFrameRate()); 
            jLabelTotalTime.setText(formatSeconds(durationInMiliSeconds));
            this.jProgressBar.setMinimum(0);
            this.jProgressBar.setMaximum(durationInMiliSeconds-1);
        
        } catch (UnsupportedAudioFileException ex)
        {
            Logger.getLogger(InternalWindowAudioPlayer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(InternalWindowAudioPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jProgressBar = new javax.swing.JProgressBar();
        jLabelTotalTime = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jToggleButtonPlay = new javax.swing.JToggleButton();
        jLabelElapsedTime = new javax.swing.JLabel();

        setClosable(true);
        getContentPane().add(jProgressBar, java.awt.BorderLayout.CENTER);

        jLabelTotalTime.setText("99:99");
        getContentPane().add(jLabelTotalTime, java.awt.BorderLayout.LINE_END);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_play.png"))); // NOI18N
        jToggleButtonPlay.setToolTipText("Reproducir");
        jToggleButtonPlay.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButtonPlayActionPerformed(evt);
            }
        });
        jPanel1.add(jToggleButtonPlay, java.awt.BorderLayout.WEST);

        jLabelElapsedTime.setText("00:00");
        jPanel1.add(jLabelElapsedTime, java.awt.BorderLayout.LINE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonPlayActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonPlayActionPerformed

        if (!this.jToggleButtonPlay.isSelected())
        {

            jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smm/images/icon_play.png")));
            jToggleButtonPlay.setToolTipText("Reproducir");
            jLabelElapsedTime.setText("00:00");
            this.jProgressBar.setValue(0);
            this.timer.stop();
            this.player.stop();
            
        }
        else
        { 
            
            this.player.play();
            this.timer = new Timer (1, new ActionListener () 
            { 
                private int elapsedMiliSeconds = 1;
                 
                @Override
                public void actionPerformed(ActionEvent e) 
                { 
                    jLabelElapsedTime.setText(formatSeconds(elapsedMiliSeconds));
                    jProgressBar.setValue(elapsedMiliSeconds);
                    elapsedMiliSeconds++;
                    
                    if (elapsedMiliSeconds > durationInMiliSeconds)
                    {
                        
                        jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smm/images/icon_play.png")));
                        jToggleButtonPlay.setToolTipText("Reproducir");
                        jLabelElapsedTime.setText("00:00");
                        jProgressBar.setValue(0);
                        timer.stop();
                        player.stop(); 
                        jToggleButtonPlay.setSelected(false);
                        
                        
                        
                    }
                    
                } 
            }); 
            timer.start();
            jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smm/images/icon_stop.png")));
            jToggleButtonPlay.setToolTipText("Parar reproduccion");
        }
        
        

    }//GEN-LAST:event_jToggleButtonPlayActionPerformed

    /**
     * Devuelve los milisegundos formateados como 00:00
     * @param totalmiliSeconds milisegundos totales
     * @return una cadena con el tiempo formateado
     */
    private String formatSeconds(int totalmiliSeconds)
    {
        
        int totalSeconds = totalmiliSeconds / 1000;
        
        int minutes = (totalSeconds % 3600) / 600;
        int seconds = totalSeconds % 600;

        return String.format("%02d:%02d", minutes, seconds); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelElapsedTime;
    private javax.swing.JLabel jLabelTotalTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JToggleButton jToggleButtonPlay;
    // End of variables declaration//GEN-END:variables
}
