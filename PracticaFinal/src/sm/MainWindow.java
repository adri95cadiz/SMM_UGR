package sm;

import java.awt.Color;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import GraphicsBasico2D.Config;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import swing.JFontChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import audio.AudioHandler;
import graphics.Shape;
import Image.KernelTypes;
import Image.ProductOp;
import Image.RandomizerOp;
import Image.SepiaOp;
import Image.SobelOp;
import UI.Canvas;
import UI.ColorChooserButton.ColorChangedListener;
import sm.image.BlendOp;
import sm.image.Histogram;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SubtractionOp;
import sm.image.ThresholdOp;
import sm.image.TintOp;
import sm.sound.SMSoundRecorder;
/**
 * Esta clase representa a la ventana principal de la aplicación, es la que contiene
 * las barras de herramientas, el menú y que contiene n ventanas internas (IntenalWindow)
 *
 * @author Ernesto Serrano
 */
public class MainWindow extends javax.swing.JFrame
{
    private InternalWindowWebCam webcamWindow;
    private SMSoundRecorder audioRecorder;
    private File audioTmp;
    private Timer timer;
    // Almacenamiento temporal de la imagen para realizarle cambios
    private BufferedImage imgTmp;

    // Variables adicionales para la mezcla de imagenes
    private BufferedImage imgTmp2Blend;
    private InternalWindowImage blendedWindow;

    public int imageHeight = 300;
    public int imageWidth = 400;
    private int ndocument = 1; // aqui guardamos el numero de documento para el titulo

    private Shape clipBoardShape;
    /**
     * Creates new form VentanaPrincipal
     */
    public MainWindow()
    {
        initComponents();

        // Asignamos los eventos de los controles propios
        this.setCustomControlEvents();
        // Desactivamos por defecto todos los elementos de las barras de imagen
        this.setImageWindowDeactivated();
        
        this.jSplitPane1.setDividerLocation(0.9);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroupTools = new javax.swing.ButtonGroup();
        jButtonGroupFill = new javax.swing.ButtonGroup();
        jSeparator2 = new javax.swing.JSeparator();
        jToolBarTools = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonDuplicate = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jToggleButtonPoint = new javax.swing.JToggleButton();
        jToggleButtonLine = new javax.swing.JToggleButton();
        jToggleButtonRectangle = new javax.swing.JToggleButton();
        jToggleButtonRoundRectangle = new javax.swing.JToggleButton();
        jToggleButtonArc = new javax.swing.JButton();
        jToggleButtonCurve = new javax.swing.JToggleButton();
        jToggleButtonPolyline = new javax.swing.JToggleButton();
        jToggleButtonPolygon = new javax.swing.JToggleButton();
        jToggleButtonEllipse = new javax.swing.JToggleButton();
        jToggleButtonMove = new javax.swing.JToggleButton();
        jToggleButtonText = new javax.swing.JToggleButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        jButtonFont = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButtonColorChooserFront = new UI.ColorChooserButton(Color.BLACK);
        jButtonColorChooserBack = new UI.ColorChooserButton(Color.WHITE);
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jPanelStroke = new UI.StrokeChooserComboBox();
        jSpinnerStroke = new javax.swing.JSpinner();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jToggleButtonNoFill = new javax.swing.JToggleButton();
        jToggleButtonSolidFill = new javax.swing.JToggleButton();
        jToggleButtonHorizontalFill = new javax.swing.JToggleButton();
        jToggleButtonVerticalFill = new javax.swing.JToggleButton();
        jToggleButtonRadialFill = new javax.swing.JToggleButton();
        jToggleButtonDiagonal1Fill = new javax.swing.JToggleButton();
        jToggleButtonDiagonal2Fill = new javax.swing.JToggleButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jToggleButtonAntialiasing = new javax.swing.JToggleButton();
        jSliderAlpha = new javax.swing.JSlider();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jToggleButtonRecord = new javax.swing.JToggleButton();
        jLabelRecordTime = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jButtonWebCam = new javax.swing.JButton();
        jButtonSnapShot = new javax.swing.JButton();
        jPanelCenter = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        desktop = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListShapes = new javax.swing.JList<String>();
        jPanel2 = new javax.swing.JPanel();
        jButtonMoveUp = new javax.swing.JButton();
        jButtonMoveDown = new javax.swing.JButton();
        jToolBarImage = new javax.swing.JToolBar();
        jPanelImageBrightness = new javax.swing.JPanel();
        jSliderBrightness = new javax.swing.JSlider();
        jPanelImageFilter = new javax.swing.JPanel();
        jComboBoxFilter = new javax.swing.JComboBox<String>();
        jPanelImageContrast = new javax.swing.JPanel();
        jButtonConstrast = new javax.swing.JButton();
        jButtonConstrastBright = new javax.swing.JButton();
        jButtonContrastDark = new javax.swing.JButton();
        jPanelImageOperations = new javax.swing.JPanel();
        jButtonSinus = new javax.swing.JButton();
        jButtonSepia = new javax.swing.JButton();
        jButtonSobel = new javax.swing.JButton();
        jButtonTinted = new javax.swing.JButton();
        jButtonNegative = new javax.swing.JButton();
        jButtonGrayScale = new javax.swing.JButton();
        jButtonRandomBlack = new javax.swing.JButton();
        jPanelImageBinary = new javax.swing.JPanel();
        jButtonBinaryAdd = new javax.swing.JButton();
        jButtonBinarySubstract = new javax.swing.JButton();
        jButtonBinaryProduct = new javax.swing.JButton();
        jSliderBinaryOperations = new javax.swing.JSlider();
        jPanelUmbralization = new javax.swing.JPanel();
        jSliderUmbralization = new javax.swing.JSlider();
        jPanelStatusBar = new javax.swing.JPanel();
        jToolBarImageRotation = new javax.swing.JToolBar();
        jPanelImageRotate = new javax.swing.JPanel();
        jSliderRotate = new javax.swing.JSlider();
        jButtonRotate90 = new javax.swing.JButton();
        jButton180 = new javax.swing.JButton();
        jButtonRotate270 = new javax.swing.JButton();
        jPanelZoom = new javax.swing.JPanel();
        jButtonZoomMinus = new javax.swing.JButton();
        jButtonZoomPlus = new javax.swing.JButton();
        jStatusBarTool = new javax.swing.JLabel();
        jPanelCursorAndColor = new javax.swing.JPanel();
        jStatusBarCursor = new javax.swing.JLabel();
        jStatusBarColor = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jCheckBoxMenuItemToolBar = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemToolBarImageOperations = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemToolBarImageRotation = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemStatusBar = new javax.swing.JCheckBoxMenuItem();
        jMenuImage = new javax.swing.JMenu();
        jMenuItemChangeSize = new javax.swing.JMenuItem();
        jMenuItemDuplicateImage = new javax.swing.JMenuItem();
        jMenuItemHistogram = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 500));

        jToolBarTools.setRollover(true);

        jButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_new.png"))); // NOI18N
        jButtonNew.setToolTipText("Nueva imagen");
        jButtonNew.setFocusable(false);
        jButtonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonNew);

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_open.png"))); // NOI18N
        jButtonOpen.setToolTipText("Abrir");
        jButtonOpen.setFocusable(false);
        jButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonOpen);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_save.png"))); // NOI18N
        jButtonSave.setToolTipText("Guardar");
        jButtonSave.setFocusable(false);
        jButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonSave);

        jButtonDuplicate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_duplicate.png"))); // NOI18N
        jButtonDuplicate.setToolTipText("Duplicar");
        jButtonDuplicate.setFocusable(false);
        jButtonDuplicate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDuplicate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDuplicateActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonDuplicate);
        jToolBarTools.add(jSeparator3);

        jButtonGroupTools.add(jToggleButtonPoint);
        jToggleButtonPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_pencil.png"))); // NOI18N
        jToggleButtonPoint.setSelected(true);
        jToggleButtonPoint.setToolTipText("Punto");
        jToggleButtonPoint.setFocusable(false);
        jToggleButtonPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPointActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonPoint);

        jButtonGroupTools.add(jToggleButtonLine);
        jToggleButtonLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_line.png"))); // NOI18N
        jToggleButtonLine.setToolTipText("Linea");
        jToggleButtonLine.setFocusable(false);
        jToggleButtonLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonLineActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonLine);

        jButtonGroupTools.add(jToggleButtonRectangle);
        jToggleButtonRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_rectangle.png"))); // NOI18N
        jToggleButtonRectangle.setToolTipText("Rectangulo");
        jToggleButtonRectangle.setFocusable(false);
        jToggleButtonRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRectangleActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonRectangle);

        jButtonGroupTools.add(jToggleButtonRoundRectangle);
        jToggleButtonRoundRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_roundrectangle.png"))); // NOI18N
        jToggleButtonRoundRectangle.setToolTipText("Rectangulo redondeado");
        jToggleButtonRoundRectangle.setFocusable(false);
        jToggleButtonRoundRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRoundRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRoundRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRoundRectangleActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonRoundRectangle);

        jToggleButtonArc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_arc.png"))); // NOI18N
        jToggleButtonArc.setToolTipText("Arco");
        jButtonGroupTools.add(jToggleButtonArc);
        jToggleButtonArc.setFocusable(false);
        jToggleButtonArc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonArc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonArc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonArcActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonArc);

        jButtonGroupTools.add(jToggleButtonCurve);
        jToggleButtonCurve.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_curve.png"))); // NOI18N
        jToggleButtonCurve.setToolTipText("Curva");
        jToggleButtonCurve.setFocusable(false);
        jToggleButtonCurve.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonCurve.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonCurve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonCurveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonCurve);

        jButtonGroupTools.add(jToggleButtonPolyline);
        jToggleButtonPolyline.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_polygon.png"))); // NOI18N
        jToggleButtonPolyline.setToolTipText("Polilínea");
        jToggleButtonPolyline.setFocusable(false);
        jToggleButtonPolyline.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPolyline.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPolyline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPolylineActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonPolyline);

        jButtonGroupTools.add(jToggleButtonPolygon);
        jToggleButtonPolygon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_polygon.png"))); // NOI18N
        jToggleButtonPolygon.setToolTipText("Poligono");
        jToggleButtonPolygon.setFocusable(false);
        jToggleButtonPolygon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPolygon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPolygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPolygonActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonPolygon);

        jButtonGroupTools.add(jToggleButtonEllipse);
        jToggleButtonEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_ellipse.png"))); // NOI18N
        jToggleButtonEllipse.setToolTipText("Elipse");
        jToggleButtonEllipse.setFocusable(false);
        jToggleButtonEllipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonEllipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonEllipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonEllipseActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonEllipse);

        jButtonGroupTools.add(jToggleButtonMove);
        jToggleButtonMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_move.png"))); // NOI18N
        jToggleButtonMove.setToolTipText("Mover");
        jToggleButtonMove.setFocusable(false);
        jToggleButtonMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMoveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonMove);

        jButtonGroupTools.add(jToggleButtonText);
        jToggleButtonText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_text.png"))); // NOI18N
        jToggleButtonText.setToolTipText("Texto");
        jToggleButtonText.setFocusable(false);
        jToggleButtonText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonText.setPreferredSize(new java.awt.Dimension(24, 24));
        jToggleButtonText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTextActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonText);
        jToolBarTools.add(jSeparator10);

        jButtonFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_font.png"))); // NOI18N
        jButtonFont.setToolTipText("Fuente");
        jButtonFont.setFocusable(false);
        jButtonFont.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFont.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonFont.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFontActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonFont);
        jToolBarTools.add(jSeparator4);

        jButtonColorChooserFront.setToolTipText("Color de borde");
        jButtonColorChooserFront.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonColorChooserFront.setBorderPainted(false);
        jButtonColorChooserFront.setFocusable(false);
        jButtonColorChooserFront.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonColorChooserFront.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarTools.add(jButtonColorChooserFront);

        jButtonColorChooserBack.setForeground(new java.awt.Color(255, 255, 255));
        jButtonColorChooserBack.setToolTipText("Color de fondo");
        jButtonColorChooserBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonColorChooserBack.setBorderPainted(false);
        jButtonColorChooserBack.setFocusable(false);
        jButtonColorChooserBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonColorChooserBack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarTools.add(jButtonColorChooserBack);
        jToolBarTools.add(jSeparator5);
        jToolBarTools.add(jPanelStroke);

        jSpinnerStroke.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));
        jSpinnerStroke.setToolTipText("Grosor de linea");
        jSpinnerStroke.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerStroke, ""));
        jSpinnerStroke.setFocusable(false);
        jSpinnerStroke.setValue(1);
        jSpinnerStroke.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerStrokeStateChanged(evt);
            }
        });
        jToolBarTools.add(jSpinnerStroke);
        jToolBarTools.add(jSeparator8);

        jButtonGroupFill.add(jToggleButtonNoFill);
        jToggleButtonNoFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_fillno.png"))); // NOI18N
        jToggleButtonNoFill.setSelected(true);
        jToggleButtonNoFill.setToolTipText("Sin relleno");
        jToggleButtonNoFill.setFocusable(false);
        jToggleButtonNoFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonNoFill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonNoFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonNoFillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonNoFill);

        jButtonGroupFill.add(jToggleButtonSolidFill);
        jToggleButtonSolidFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_fill.png"))); // NOI18N
        jToggleButtonSolidFill.setToolTipText("Relleno sólido");
        jToggleButtonSolidFill.setFocusable(false);
        jToggleButtonSolidFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonSolidFill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonSolidFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSolidFillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonSolidFill);

        jButtonGroupFill.add(jToggleButtonHorizontalFill);
        jToggleButtonHorizontalFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_fill_horizontal.png"))); // NOI18N
        jToggleButtonHorizontalFill.setToolTipText("Degradado horizontal");
        jToggleButtonHorizontalFill.setFocusable(false);
        jToggleButtonHorizontalFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonHorizontalFill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonHorizontalFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonHorizontalFillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonHorizontalFill);

        jButtonGroupFill.add(jToggleButtonVerticalFill);
        jToggleButtonVerticalFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_fill_vertical.png"))); // NOI18N
        jToggleButtonVerticalFill.setToolTipText("Degradado horizontal");
        jToggleButtonVerticalFill.setFocusable(false);
        jToggleButtonVerticalFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonVerticalFill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonVerticalFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVerticalFillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonVerticalFill);

        jButtonGroupFill.add(jToggleButtonRadialFill);
        jToggleButtonRadialFill.setText("R");
        jToggleButtonRadialFill.setToolTipText("Degradado Radial");
        jToggleButtonRadialFill.setFocusable(false);
        jToggleButtonRadialFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRadialFill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRadialFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRadialFillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonRadialFill);

        jButtonGroupFill.add(jToggleButtonDiagonal1Fill);
        jToggleButtonDiagonal1Fill.setText("D1");
        jToggleButtonDiagonal1Fill.setFocusable(false);
        jToggleButtonDiagonal1Fill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonDiagonal1Fill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonDiagonal1Fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonDiagonal1FillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonDiagonal1Fill);

        jButtonGroupFill.add(jToggleButtonDiagonal2Fill);
        jToggleButtonDiagonal2Fill.setText("D2");
        jToggleButtonDiagonal2Fill.setFocusable(false);
        jToggleButtonDiagonal2Fill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonDiagonal2Fill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonDiagonal2Fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonDiagonal2FillActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonDiagonal2Fill);
        jToolBarTools.add(jSeparator9);

        jToggleButtonAntialiasing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_antialiasing.png"))); // NOI18N
        jToggleButtonAntialiasing.setToolTipText("Suavizado");
        jToggleButtonAntialiasing.setFocusable(false);
        jToggleButtonAntialiasing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonAntialiasing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonAntialiasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAntialiasingActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonAntialiasing);

        jSliderAlpha.setPaintTicks(true);
        jSliderAlpha.setToolTipText("Transparencia");
        jSliderAlpha.setValue(100);
        jSliderAlpha.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderAlphaStateChanged(evt);
            }
        });
        jToolBarTools.add(jSliderAlpha);
        jToolBarTools.add(jSeparator6);

        jToggleButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_record.png"))); // NOI18N
        jToggleButtonRecord.setToolTipText("Grabar");
        jToggleButtonRecord.setFocusable(false);
        jToggleButtonRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRecordActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonRecord);

        jLabelRecordTime.setText("00:00");
        jToolBarTools.add(jLabelRecordTime);
        jToolBarTools.add(jSeparator7);

        jButtonWebCam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_webcam.png"))); // NOI18N
        jButtonWebCam.setToolTipText("Abrir webcam");
        jButtonWebCam.setFocusable(false);
        jButtonWebCam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonWebCam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonWebCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWebCamActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonWebCam);

        jButtonSnapShot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_snapshot.png"))); // NOI18N
        jButtonSnapShot.setToolTipText("Tomar captura");
        jButtonSnapShot.setFocusable(false);
        jButtonSnapShot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSnapShot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSnapShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSnapShotActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonSnapShot);

        getContentPane().add(jToolBarTools, java.awt.BorderLayout.PAGE_START);

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        desktop.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                desktopMouseMoved(evt);
            }
        });
        desktop.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                desktopVetoableChange(evt);
            }
        });

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(desktop);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jListShapes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListShapes.setEnabled(false);
        jListShapes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListShapesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListShapes);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jButtonMoveUp.setText("Hacia delante");
        jButtonMoveUp.setToolTipText("Mover Arriba");
        jButtonMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveUpActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonMoveUp);

        jButtonMoveDown.setText("Hacia el fondo");
        jButtonMoveDown.setToolTipText("Mover Abajo");
        jButtonMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveDownActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonMoveDown);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setRightComponent(jPanel1);

        jPanelCenter.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jToolBarImage.setRollover(true);
        jToolBarImage.setMinimumSize(new java.awt.Dimension(544, 90));
        jToolBarImage.setPreferredSize(new java.awt.Dimension(722, 80));

        jPanelImageBrightness.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        jPanelImageBrightness.setDoubleBuffered(false);
        jPanelImageBrightness.setEnabled(false);
        jPanelImageBrightness.setLayout(new java.awt.GridLayout(1, 0));

        jSliderBrightness.setMaximum(255);
        jSliderBrightness.setMinimum(-255);
        jSliderBrightness.setValue(0);
        jSliderBrightness.setPreferredSize(new java.awt.Dimension(70, 29));
        jSliderBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBrightnessStateChanged(evt);
            }
        });
        jSliderBrightness.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderBrightnessFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSliderBrightnessFocusLost(evt);
            }
        });
        jPanelImageBrightness.add(jSliderBrightness);

        jToolBarImage.add(jPanelImageBrightness);

        jPanelImageFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        jPanelImageFilter.setDoubleBuffered(false);
        jPanelImageFilter.setEnabled(false);
        jPanelImageFilter.setMinimumSize(new java.awt.Dimension(108, 70));
        jPanelImageFilter.setLayout(new java.awt.GridLayout(1, 0));

        jComboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--seleccione filtro--", "Emborronamiento media", "Emborronamiento binomial", "Enfoque", "Relieve", "Detector de fronteras laplaciano" }));
        jComboBoxFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFilterItemStateChanged(evt);
            }
        });
        jComboBoxFilter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxFilterFocusGained(evt);
            }
        });
        jComboBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterActionPerformed(evt);
            }
        });
        jPanelImageFilter.add(jComboBoxFilter);

        jToolBarImage.add(jPanelImageFilter);

        jPanelImageContrast.setBorder(javax.swing.BorderFactory.createTitledBorder("Constraste"));
        jPanelImageContrast.setDoubleBuffered(false);
        jPanelImageContrast.setEnabled(false);
        jPanelImageContrast.setMinimumSize(new java.awt.Dimension(96, 70));
        jPanelImageContrast.setLayout(new java.awt.GridLayout(1, 3));

        jButtonConstrast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_contrast.png"))); // NOI18N
        jButtonConstrast.setToolTipText("Constraste");
        jButtonConstrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConstrastActionPerformed(evt);
            }
        });
        jPanelImageContrast.add(jButtonConstrast);

        jButtonConstrastBright.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_bright.png"))); // NOI18N
        jButtonConstrastBright.setToolTipText("Brillante");
        jButtonConstrastBright.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConstrastBrightActionPerformed(evt);
            }
        });
        jPanelImageContrast.add(jButtonConstrastBright);

        jButtonContrastDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_dark.png"))); // NOI18N
        jButtonContrastDark.setToolTipText("Oscuro");
        jButtonContrastDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContrastDarkActionPerformed(evt);
            }
        });
        jPanelImageContrast.add(jButtonContrastDark);

        jToolBarImage.add(jPanelImageContrast);

        jPanelImageOperations.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones"));
        jPanelImageOperations.setDoubleBuffered(false);
        jPanelImageOperations.setEnabled(false);
        jPanelImageOperations.setPreferredSize(new java.awt.Dimension(158, 64));
        jPanelImageOperations.setLayout(new java.awt.GridLayout(1, 3));

        jButtonSinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_sinusoidal.png"))); // NOI18N
        jButtonSinus.setToolTipText("Seno");
        jButtonSinus.setAlignmentX(10.0F);
        jButtonSinus.setAlignmentY(0.0F);
        jButtonSinus.setBorderPainted(false);
        jButtonSinus.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonSinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSinusActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonSinus);

        jButtonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_sepia_1.png"))); // NOI18N
        jButtonSepia.setToolTipText("Sepia");
        jButtonSepia.setAlignmentY(0.0F);
        jButtonSepia.setBorderPainted(false);
        jButtonSepia.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSepiaActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonSepia);

        jButtonSobel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_gradient.png"))); // NOI18N
        jButtonSobel.setToolTipText("Gradiente Sobel");
        jButtonSobel.setAlignmentY(0.0F);
        jButtonSobel.setBorderPainted(false);
        jButtonSobel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSobelActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonSobel);

        jButtonTinted.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_tinted.png"))); // NOI18N
        jButtonTinted.setToolTipText("Tintado");
        jButtonTinted.setAlignmentY(0.0F);
        jButtonTinted.setBorderPainted(false);
        jButtonTinted.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonTinted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTintedActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonTinted);

        jButtonNegative.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_negative.png"))); // NOI18N
        jButtonNegative.setToolTipText("Negativo");
        jButtonNegative.setAlignmentY(0.0F);
        jButtonNegative.setBorderPainted(false);
        jButtonNegative.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNegativeActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonNegative);

        jButtonGrayScale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_gray.png"))); // NOI18N
        jButtonGrayScale.setToolTipText("Escala de grises");
        jButtonGrayScale.setAlignmentY(0.0F);
        jButtonGrayScale.setBorderPainted(false);
        jButtonGrayScale.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonGrayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGrayScaleActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonGrayScale);

        jButtonRandomBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_sepia.png"))); // NOI18N
        jButtonRandomBlack.setToolTipText("Propia");
        jButtonRandomBlack.setAlignmentY(0.0F);
        jButtonRandomBlack.setBorderPainted(false);
        jButtonRandomBlack.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonRandomBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRandomBlackActionPerformed(evt);
            }
        });
        jPanelImageOperations.add(jButtonRandomBlack);

        jToolBarImage.add(jPanelImageOperations);

        jPanelImageBinary.setBorder(javax.swing.BorderFactory.createTitledBorder("Binarias"));
        jPanelImageBinary.setDoubleBuffered(false);
        jPanelImageBinary.setEnabled(false);
        java.awt.GridBagLayout jPanelImageBinaryLayout = new java.awt.GridBagLayout();
        jPanelImageBinaryLayout.columnWidths = new int[] {10, 10, 10};
        jPanelImageBinaryLayout.rowHeights = new int[] {1};
        jPanelImageBinary.setLayout(jPanelImageBinaryLayout);

        jButtonBinaryAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_add.png"))); // NOI18N
        jButtonBinaryAdd.setToolTipText("suma binaria");
        jButtonBinaryAdd.setMaximumSize(new java.awt.Dimension(20, 28));
        jButtonBinaryAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonBinaryAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonBinaryAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinaryAddActionPerformed(evt);
            }
        });
        jPanelImageBinary.add(jButtonBinaryAdd, new java.awt.GridBagConstraints());

        jButtonBinarySubstract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_substract.png"))); // NOI18N
        jButtonBinarySubstract.setToolTipText("resta binaria");
        jButtonBinarySubstract.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonBinarySubstract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinarySubstractActionPerformed(evt);
            }
        });
        jPanelImageBinary.add(jButtonBinarySubstract, new java.awt.GridBagConstraints());

        jButtonBinaryProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_product.png"))); // NOI18N
        jButtonBinaryProduct.setToolTipText("multiplicacion binaria");
        jButtonBinaryProduct.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonBinaryProduct.setMaximumSize(new java.awt.Dimension(20, 28));
        jButtonBinaryProduct.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonBinaryProduct.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonBinaryProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinaryProductActionPerformed(evt);
            }
        });
        jPanelImageBinary.add(jButtonBinaryProduct, new java.awt.GridBagConstraints());

        jSliderBinaryOperations.setPreferredSize(new java.awt.Dimension(150, 29));
        jSliderBinaryOperations.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBinaryOperationsStateChanged(evt);
            }
        });
        jSliderBinaryOperations.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderBinaryOperationsFocusGained(evt);
            }
        });
        jSliderBinaryOperations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jSliderBinaryOperationsMouseExited(evt);
            }
        });
        jPanelImageBinary.add(jSliderBinaryOperations, new java.awt.GridBagConstraints());

        jToolBarImage.add(jPanelImageBinary);

        jPanelUmbralization.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizacion"));
        jPanelUmbralization.setDoubleBuffered(false);
        jPanelUmbralization.setEnabled(false);
        jPanelUmbralization.setLayout(new java.awt.GridLayout(1, 0));

        jSliderUmbralization.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderUmbralizationStateChanged(evt);
            }
        });
        jSliderUmbralization.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderUmbralizationFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSliderUmbralizationFocusLost(evt);
            }
        });
        jPanelUmbralization.add(jSliderUmbralization);

        jToolBarImage.add(jPanelUmbralization);

        jPanelCenter.add(jToolBarImage, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelStatusBar.setLayout(new java.awt.BorderLayout());

        jToolBarImageRotation.setRollover(true);

        jPanelImageRotate.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        jPanelImageRotate.setPreferredSize(new java.awt.Dimension(300, 62));
        jPanelImageRotate.setLayout(new java.awt.GridLayout(1, 4));

        jSliderRotate.setMaximum(360);
        jSliderRotate.setMinorTickSpacing(90);
        jSliderRotate.setPaintTicks(true);
        jSliderRotate.setValue(0);
        jSliderRotate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderRotateStateChanged(evt);
            }
        });
        jSliderRotate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderRotateFocusGained(evt);
            }
        });
        jPanelImageRotate.add(jSliderRotate);

        jButtonRotate90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_rotate_90.png"))); // NOI18N
        jButtonRotate90.setToolTipText("90 Grados");
        jButtonRotate90.setFocusable(false);
        jButtonRotate90.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRotate90.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRotate90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRotate90ActionPerformed(evt);
            }
        });
        jPanelImageRotate.add(jButtonRotate90);

        jButton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_rotate_180.png"))); // NOI18N
        jButton180.setToolTipText("180 Grados");
        jButton180.setFocusable(false);
        jButton180.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton180.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton180ActionPerformed(evt);
            }
        });
        jPanelImageRotate.add(jButton180);

        jButtonRotate270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_rotate_270.png"))); // NOI18N
        jButtonRotate270.setToolTipText("270 Grados");
        jButtonRotate270.setFocusable(false);
        jButtonRotate270.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRotate270.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRotate270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRotate270ActionPerformed(evt);
            }
        });
        jPanelImageRotate.add(jButtonRotate270);

        jToolBarImageRotation.add(jPanelImageRotate);

        jPanelZoom.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        jPanelZoom.setLayout(new java.awt.GridLayout(1, 0));

        jButtonZoomMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_zoom_minus.png"))); // NOI18N
        jButtonZoomMinus.setToolTipText("Reducir");
        jButtonZoomMinus.setFocusable(false);
        jButtonZoomMinus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonZoomMinus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonZoomMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZoomMinusActionPerformed(evt);
            }
        });
        jPanelZoom.add(jButtonZoomMinus);

        jButtonZoomPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_zoom_plus.png"))); // NOI18N
        jButtonZoomPlus.setToolTipText("Ampliar");
        jButtonZoomPlus.setFocusable(false);
        jButtonZoomPlus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonZoomPlus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonZoomPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZoomPlusActionPerformed(evt);
            }
        });
        jPanelZoom.add(jButtonZoomPlus);

        jToolBarImageRotation.add(jPanelZoom);

        jPanelStatusBar.add(jToolBarImageRotation, java.awt.BorderLayout.NORTH);

        jStatusBarTool.setText("Barra Estado");
        jStatusBarTool.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelStatusBar.add(jStatusBarTool, java.awt.BorderLayout.WEST);

        jPanelCursorAndColor.setLayout(new java.awt.BorderLayout());

        jStatusBarCursor.setText("(x,y)");
        jStatusBarCursor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelCursorAndColor.add(jStatusBarCursor, java.awt.BorderLayout.WEST);

        jStatusBarColor.setText("RGB");
        jStatusBarColor.setOpaque(true);
        jPanelCursorAndColor.add(jStatusBarColor, java.awt.BorderLayout.EAST);

        jPanelStatusBar.add(jPanelCursorAndColor, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanelStatusBar, java.awt.BorderLayout.SOUTH);

        jMenuFile.setText("Archivo");

        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        jMenuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_new.png"))); // NOI18N
        jMenuItemNew.setText("Nuevo");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_open.png"))); // NOI18N
        jMenuOpen.setText("Abrir");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuOpen);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        jMenuSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_save.png"))); // NOI18N
        jMenuSave.setText("Guardar");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuSave);
        jMenuFile.add(jSeparator1);

        jMenuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_exit.png"))); // NOI18N
        jMenuItemExit.setText("Salir");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Editar");

        jMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_MASK));
        jMenuItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_cut.png"))); // NOI18N
        jMenuItemCut.setText("Cortar");
        jMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCutActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCut);

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        jMenuItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_copy.png"))); // NOI18N
        jMenuItemCopy.setText("Copiar");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCopy);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        jMenuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_paste.png"))); // NOI18N
        jMenuItemPaste.setText("Pegar");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemPaste);

        jMenuBar.add(jMenuEdit);

        jMenuView.setText("Ver");

        jCheckBoxMenuItemToolBar.setSelected(true);
        jCheckBoxMenuItemToolBar.setText("Barra de herramientas");
        jCheckBoxMenuItemToolBar.setToolTipText("");
        jCheckBoxMenuItemToolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBar);

        jCheckBoxMenuItemToolBarImageOperations.setSelected(true);
        jCheckBoxMenuItemToolBarImageOperations.setText("Barra de imagen");
        jCheckBoxMenuItemToolBarImageOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarImageOperationsActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBarImageOperations);

        jCheckBoxMenuItemToolBarImageRotation.setSelected(true);
        jCheckBoxMenuItemToolBarImageRotation.setText("Barra de rotacion y escalado");
        jCheckBoxMenuItemToolBarImageRotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarImageRotationActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBarImageRotation);

        jCheckBoxMenuItemStatusBar.setSelected(true);
        jCheckBoxMenuItemStatusBar.setText("Barra de estado");
        jCheckBoxMenuItemStatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemStatusBarActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemStatusBar);

        jMenuBar.add(jMenuView);

        jMenuImage.setText("Imagen");

        jMenuItemChangeSize.setText("Cambiar tamaño");
        jMenuItemChangeSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChangeSizeActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemChangeSize);

        jMenuItemDuplicateImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_duplicate.png"))); // NOI18N
        jMenuItemDuplicateImage.setText("Duplicar imagen");
        jMenuItemDuplicateImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDuplicateImageActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemDuplicateImage);

        jMenuItemHistogram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/images/icon_histogram.png"))); // NOI18N
        jMenuItemHistogram.setText("Histograma");
        jMenuItemHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistogramActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemHistogram);

        jMenuBar.add(jMenuImage);

        jMenuHelp.setText("Ayuda");

        jMenuItemHelpAbout.setText("Acerca de...");
        jMenuItemHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelpAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        // TODO add your handling code here:

        InternalWindowImage vi = new InternalWindowImage();

        // Truquillo para mostrar las ventanas en cascada, le sumamos 25 pixeles a la nueva
        JInternalFrame selectedWindow = (JInternalFrame) this.desktop.getSelectedFrame();
        if (selectedWindow != null)
            vi.setLocation(selectedWindow.getX() + 25, selectedWindow.getY() + 25);

        vi.setParent(this);
        desktop.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nueva imagen " + String.valueOf(this.ndocument));

        this.ndocument++;

        BufferedImage img = new BufferedImage(this.imageWidth, this.imageHeight, BufferedImage.TYPE_INT_ARGB);

        // le ponemos el color blanco (si no saldría negra)
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, img.getWidth(), img.getHeight()));

        vi.getCanvas().setImage(img);


    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        // TODO add your handling code here:

        JFileChooser dlg = new JFileChooser();

//        dlg.setFileFilter(new FileNameExtensionFilter("Imagen GIF (*.gif)", "gif"));
//        dlg.setFileFilter(new FileNameExtensionFilter("Imagen PNG (*.png)", "png"));
//        dlg.setFileFilter(new FileNameExtensionFilter("Imagen JPEG (*.jpg, *.jpeg)", "jpg", "jpeg"));
        dlg.setFileFilter(new FileNameExtensionFilter("Ficheros de imagen (*.jpg, *.jpeg, *.png, *.gif)", "jpg", "jpeg", "png", "gif"));
        dlg.setFileFilter(new FileNameExtensionFilter("Ficheros de audio (*.wav, *.au)", "wav", "au"));
        dlg.setFileFilter(new FileNameExtensionFilter("Ficheros de video (*.avi, *.mp4)", "avi", "mp4"));
        dlg.setFileFilter(new FileNameExtensionFilter("Todos los tipos soportados", "avi", "mp4", "wav", "au", "jpg", "jpeg", "png", "gif"));


        dlg.setAcceptAllFileFilterUsed(false);

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION)
        {
            File f = dlg.getSelectedFile();
            //Código

            if ( f.getName().endsWith(".wav") || f.getName().endsWith(".au") )
            {

                InternalWindowAudioPlayer vi = new InternalWindowAudioPlayer(f);
                desktop.add(vi);

                JInternalFrame lastWindow =  this.desktop.getSelectedFrame();
                if (lastWindow != null)
                    vi.setLocation(lastWindow.getX() + 25, lastWindow.getY() + 25);

                vi.setTitle(f.getName());
                vi.setVisible(true);

            } else if ( f.getName().endsWith(".avi") || f.getName().endsWith(".mp4"))
            {

                InternalWindowVideoPlayer vp = InternalWindowVideoPlayer.getInstance(f);

                if (vp != null)
                {
                    desktop.add(vp);
                    vp.setVisible(true);
                    vp.setTitle(f.getName());
                }


            } else
            {
                InternalWindowImage vi = new InternalWindowImage();
                vi.setParent(this);
                desktop.add(vi);
                vi.setVisible(true);

                BufferedImage img;
                try
                {
                    img = ImageIO.read(f);
                    vi.getCanvas().setImage(img);
                    vi.setTitle(f.getName());
                } catch (IOException ex)
                {
                    JOptionPane.showMessageDialog(null, "Error al abrir la imagen");
                }
            }

        }


    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed

        // Controlamos que solo se le de a guardar cuando haya una ventana de imagen
        if (!(desktop.getSelectedFrame() instanceof InternalWindowImage))
            return;

        InternalWindowImage vi = (InternalWindowImage) desktop.getSelectedFrame();

        if (vi != null)
        {
            JFileChooser dlg = new JFileChooser();

            // Establecemos como nombre del fichero el nombre de la ventana
            dlg.setSelectedFile(new File(vi.getTitle()));

            dlg.setFileFilter(new FileNameExtensionFilter("Imagen GIF (*.gif)", "gif"));
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen PNG (*.png)", "png"));
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen JPEG (*.jpg)", "jpg"));

            dlg.setAcceptAllFileFilterUsed(false);

            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION)

                try
                {
                    BufferedImage img = vi.getCanvas().getImage(true);
                    if (img != null)
                    {
                        File f = getSelectedFileWithExtension(dlg);

                        String filename = f.getName();
                        String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());

                        // Comprobamos que le hayamos dado extenión y sea de las soportadas
                        if (extension.length() == 0 || !("jpg".equals(extension) || "png".equals(extension) || "gif".equals(extension)))
                        {
                            // si no le ponemos fijo el formato jpg
                            extension = "jpg";
                            f = new File(f.getAbsoluteFile() + ".jpg");
                        }

                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                    }
                } catch (Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Error al guardar la imagen");
                }
        }

    }//GEN-LAST:event_jMenuSaveActionPerformed

    /**
     * Obtiene el archivo seleccionado con la extensión del filter
     *
     * @param c la instancia del filechooser
     * @return El nombre del fichero
     */
    public File getSelectedFileWithExtension(JFileChooser c)
    {
        File file = c.getSelectedFile();
        if (c.getFileFilter() instanceof FileNameExtensionFilter)
        {
            String[] exts = ((FileNameExtensionFilter) c.getFileFilter()).getExtensions();
            String nameLower = file.getName().toLowerCase();
            for (String ext : exts) // check if it already has a valid extension

                if (nameLower.endsWith('.' + ext.toLowerCase()))
                    return file; // if yes, return as-is
            // if not, append the first extension from the selected filter
            file = new File(file.toString() + '.' + exts[0]);
        }
        return file;
    }

    private void jCheckBoxMenuItemStatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemStatusBarActionPerformed
        this.jStatusBarTool.setVisible(jCheckBoxMenuItemStatusBar.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemStatusBarActionPerformed

    private void jToggleButtonPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPointActionPerformed

        Config.GENERALCONFIG.setSelectedTool(Config.Tool.POINT);
        this.jStatusBarTool.setText("Punto");
    }//GEN-LAST:event_jToggleButtonPointActionPerformed

    private void jToggleButtonLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonLineActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.LINE);
        this.jStatusBarTool.setText("Linea");
    }//GEN-LAST:event_jToggleButtonLineActionPerformed

    private void jToggleButtonRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRectangleActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.RECTANGLE);
        this.jStatusBarTool.setText("Rectangulo");
    }//GEN-LAST:event_jToggleButtonRectangleActionPerformed

    private void jToggleButtonEllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonEllipseActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.ELLIPSE);
        this.jStatusBarTool.setText("Elipse");
    }//GEN-LAST:event_jToggleButtonEllipseActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jToggleButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMoveActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.HAND);
        this.jStatusBarTool.setText("Mover");
    }//GEN-LAST:event_jToggleButtonMoveActionPerformed

    private void jSpinnerStrokeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerStrokeStateChanged
        Config.GENERALCONFIG.setStroke((Integer)jSpinnerStroke.getValue(), jPanelStroke.getSelectedIndex());
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setStroke((Integer)jSpinnerStroke.getValue(), jPanelStroke.getSelectedIndex());
            repaint();
        }
    }//GEN-LAST:event_jSpinnerStrokeStateChanged

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        this.jMenuItemNewActionPerformed(evt);
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        this.jMenuOpenActionPerformed(evt);
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        this.jMenuSaveActionPerformed(evt);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jCheckBoxMenuItemToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemToolBarActionPerformed
        this.jToolBarTools.setVisible(jCheckBoxMenuItemToolBar.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemToolBarActionPerformed

    private void jToggleButtonAntialiasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAntialiasingActionPerformed
        Config.GENERALCONFIG.setAntialiasing(jToggleButtonAntialiasing.isSelected());
        this.repaint();
    }//GEN-LAST:event_jToggleButtonAntialiasingActionPerformed

    private void jMenuItemChangeSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChangeSizeActionPerformed

        JFrame sizeWindow = new SizeWindow(this, this.imageHeight, this.imageWidth);
        sizeWindow.setVisible(true);

    }//GEN-LAST:event_jMenuItemChangeSizeActionPerformed

    private void jSliderBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBrightnessStateChanged

        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null && this.imgTmp != null)
            try
            {
                RescaleOp rop;
                if (this.imgTmp.getColorModel().hasAlpha())
                {
                    float[] scales = new float[]
                    {
                        1.0f, 1.0f, 1.0f, 1.0f
                    };
                    float vBrillo = this.jSliderBrightness.getValue();
                    float[] offsets = new float[]
                    {
                        vBrillo, vBrillo, vBrillo, 0.0f
                    };
                    rop = new RescaleOp(scales, offsets, null);
                } else
                    rop = new RescaleOp(1.0f, this.jSliderBrightness.getValue(), null);
                BufferedImage imgdest = rop.filter(this.imgTmp, null);
                vi.getCanvas().setImage(imgdest);
                vi.getCanvas().repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jSliderBrightnessStateChanged

    private void jComboBoxFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxFilterItemStateChanged


    }//GEN-LAST:event_jComboBoxFilterItemStateChanged

    private void jSliderBrightnessFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBrightnessFocusGained

        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
            this.imgTmp = vi.getCanvas().getImage(true);

    }//GEN-LAST:event_jSliderBrightnessFocusGained

    private void jSliderBrightnessFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBrightnessFocusLost
        this.imgTmp = null;
        this.jSliderBrightness.setValue(0);
    }//GEN-LAST:event_jSliderBrightnessFocusLost

    private void jComboBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterActionPerformed

        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            this.imgTmp = vi.getCanvas().getImage(true);
            if (this.imgTmp != null)
                try
                {

                    KernelTypes kt = null; // por inicializarlo con algo

                    switch (this.jComboBoxFilter.getSelectedIndex())
                    {
                        case 0: // --seleccione--
                            break;
                        case 1: // Emborronamiento media
                            kt = KernelTypes.MEDIA;
                            break;
                        case 2: // Emborronamiento binomial
                            kt = KernelTypes.BINOMIAL;
                            break;
                        case 3: // Emborronamiento Enfoque
                            kt = KernelTypes.ENFOQUE;
                            break;
                        case 4: // Relieve
                            kt = KernelTypes.RELIEVE;
                            break;
                        case 5: // Detector de fronteras laplaciano
                            kt = KernelTypes.LAPLACIANA;
                            break;

                    }

                    if (kt != null)
                    {
                        Kernel k = KernelProducer.createKernel(kt.value);
                        ConvolveOp cop = new ConvolveOp(k, 1, null);
                        BufferedImage imgDest = cop.filter(this.imgTmp, null);
                        vi.getCanvas().setImage(imgDest);
                        vi.getCanvas().repaint();
                    }

                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }


    }//GEN-LAST:event_jComboBoxFilterActionPerformed

    private void jComboBoxFilterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxFilterFocusGained

        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
            this.imgTmp = vi.getCanvas().getImage(true);

    }//GEN-LAST:event_jComboBoxFilterFocusGained

    private void jButtonConstrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConstrastActionPerformed
        this.setContrast(LookupTableProducer.TYPE_SFUNCION);
    }//GEN-LAST:event_jButtonConstrastActionPerformed

    private void jButtonConstrastBrightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConstrastBrightActionPerformed
        this.setContrast(LookupTableProducer.TYPE_ROOT);
    }//GEN-LAST:event_jButtonConstrastBrightActionPerformed

    private void jButtonContrastDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContrastDarkActionPerformed
        this.setContrast(LookupTableProducer.TYPE_POWER);
    }//GEN-LAST:event_jButtonContrastDarkActionPerformed

    private void jSliderRotateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderRotateFocusGained
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
            this.imgTmp = vi.getCanvas().getImage(true);
    }//GEN-LAST:event_jSliderRotateFocusGained

    private void jSliderRotateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderRotateStateChanged
        this.rotate(this.jSliderRotate.getValue());
    }//GEN-LAST:event_jSliderRotateStateChanged

    private void jButtonRotate90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRotate90ActionPerformed
        this.rotate(90);
    }//GEN-LAST:event_jButtonRotate90ActionPerformed

    private void jButton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton180ActionPerformed
        this.rotate(180);
    }//GEN-LAST:event_jButton180ActionPerformed

    private void jButtonRotate270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRotate270ActionPerformed
        this.rotate(270);
    }//GEN-LAST:event_jButtonRotate270ActionPerformed

    private void jButtonZoomMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZoomMinusActionPerformed
        this.scale(0.75);
    }//GEN-LAST:event_jButtonZoomMinusActionPerformed

    private void jButtonZoomPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZoomPlusActionPerformed
        this.scale(1.25);
    }//GEN-LAST:event_jButtonZoomPlusActionPerformed

    private void jMenuItemHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpAboutActionPerformed
        String msg = "<html><body><p>UGR - Sistemas Multimedia</p><p>2016 - Ernesto Serrano <a href='mailto:erseco@correo.ugr.es'>erseco@correo.ugr.es</a></p><p><a href='http://www.ernesto.es'>http://www.ernesto.es</a></p></body></html>";
        JOptionPane.showMessageDialog(this, msg, "Acerca de...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemHelpAboutActionPerformed

    private void jCheckBoxMenuItemToolBarImageOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemToolBarImageOperationsActionPerformed
        this.jToolBarImage.setVisible(jCheckBoxMenuItemToolBarImageOperations.getState());

    }//GEN-LAST:event_jCheckBoxMenuItemToolBarImageOperationsActionPerformed

    private void jButtonSinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSinusActionPerformed
        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                LookupTable lt = this.sinus(180);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonSinusActionPerformed

    private void jMenuItemDuplicateImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDuplicateImageActionPerformed

        InternalWindowImage vi = new InternalWindowImage();

        // Truquillo para mostrar las ventanas en cascada, le sumamos 25 pixeles a la nueva
        InternalWindowImage selectedWindow = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (selectedWindow != null)
        {

            vi.setLocation(selectedWindow.getX() + 25, selectedWindow.getY() + 25);

            vi.setParent(this);
            desktop.add(vi);
            vi.setVisible(true);
            vi.setTitle("Copia de " + selectedWindow.getTitle());

            BufferedImage img = selectedWindow.getCanvas().getImage(true);

            vi.getCanvas().setImage(img);

        }


    }//GEN-LAST:event_jMenuItemDuplicateImageActionPerformed

    private void jButtonBinaryAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinaryAddActionPerformed

        InternalWindowImage vi = (InternalWindowImage) (this.desktop.getSelectedFrame());
        if (vi != null)
        {
            InternalWindowImage viNext = (InternalWindowImage) this.desktop.selectFrame(false);
            if (viNext != null)
            {
                BufferedImage imgRight = vi.getCanvas().getImage(false);
                BufferedImage imgLeft = viNext.getCanvas().getImage(false);
                if (imgRight != null && imgLeft != null)
                    try
                    {
                        BlendOp op = new BlendOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new InternalWindowImage();
                        vi.setParent(this);
                        vi.getCanvas().setImage(imgdest);
                        this.desktop.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e)
                    {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
            }
        }
    }//GEN-LAST:event_jButtonBinaryAddActionPerformed

    private void jButtonBinarySubstractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinarySubstractActionPerformed

        InternalWindowImage vi = (InternalWindowImage) (this.desktop.getSelectedFrame());
        if (vi != null)
        {
            InternalWindowImage viNext = (InternalWindowImage) this.desktop.selectFrame(false);
            if (viNext != null)
            {
                BufferedImage imgRight = vi.getCanvas().getImage(false);
                BufferedImage imgLeft = viNext.getCanvas().getImage(false);
                if (imgRight != null && imgLeft != null)
                    try
                    {
                        SubtractionOp op = new SubtractionOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new InternalWindowImage();
                        vi.setParent(this);
                        vi.getCanvas().setImage(imgdest);
                        this.desktop.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e)
                    {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
            }
        }
    }//GEN-LAST:event_jButtonBinarySubstractActionPerformed

    private void jSliderUmbralizationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderUmbralizationFocusGained
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        this.imgTmp = vi != null ? vi.getCanvas().getImage(false) : null;
    }//GEN-LAST:event_jSliderUmbralizationFocusGained

    private void jSliderUmbralizationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderUmbralizationFocusLost
        this.imgTmp = null;
        this.jSliderUmbralization.setValue(128);
    }//GEN-LAST:event_jSliderUmbralizationFocusLost

    private void jSliderUmbralizationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderUmbralizationStateChanged
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && this.imgTmp != null)
            try
            {
                int umbral = this.jSliderUmbralization.getValue();
                ThresholdOp top = new ThresholdOp(umbral);
                BufferedImage imgdest = top.filter(this.imgTmp, null);
                vi.getCanvas().setImage(imgdest);
                vi.getCanvas().repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jSliderUmbralizationStateChanged

    private void jButtonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSepiaActionPerformed
        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                SepiaOp sepia = new SepiaOp();
                sepia.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonSepiaActionPerformed

    private void jButtonSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSobelActionPerformed

        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                SobelOp sobel = new SobelOp();
                sobel.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonSobelActionPerformed

    private void jButtonBinaryProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinaryProductActionPerformed

        InternalWindowImage vi = (InternalWindowImage) (this.desktop.getSelectedFrame());
        if (vi != null)
        {
            InternalWindowImage viNext = (InternalWindowImage) this.desktop.selectFrame(false);
            if (viNext != null)
            {
                BufferedImage imgRight = vi.getCanvas().getImage(false);
                BufferedImage imgLeft = viNext.getCanvas().getImage(false);
                if (imgRight != null && imgLeft != null)
                    try
                    {
                        ProductOp op = new ProductOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new InternalWindowImage();
                        vi.setParent(this);
                        vi.getCanvas().setImage(imgdest);
                        this.desktop.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e)
                    {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
            }
        }

    }//GEN-LAST:event_jButtonBinaryProductActionPerformed

    private void jMenuItemHistogramActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemHistogramActionPerformed
    {//GEN-HEADEREND:event_jMenuItemHistogramActionPerformed

        InternalWindowImage vi = (InternalWindowImage) (this.desktop.getSelectedFrame());
        if (vi != null)
        {

            BufferedImage img = vi.getCanvas().getImage(true);

            Histogram hist = new Histogram(img);

            HistogramWindow th = new HistogramWindow(hist.getNormalizedHistogram());

            System.out.println("Histograma: (deberiamos pintar un nuevo lienzo con puntos)");
            System.out.print(Arrays.deepToString(hist.getNormalizedHistogram()));

        }


    }//GEN-LAST:event_jMenuItemHistogramActionPerformed

    private void jSliderBinaryOperationsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSliderBinaryOperationsStateChanged
    {//GEN-HEADEREND:event_jSliderBinaryOperationsStateChanged

        if (this.blendedWindow != null)
        {
            float alfa = (float) this.jSliderBinaryOperations.getValue() / 100.0f;

            if (this.imgTmp != null && this.imgTmp2Blend != null)
            {
                BlendOp op = new BlendOp(this.imgTmp, alfa);

                BufferedImage imgdest = op.filter(this.imgTmp2Blend, null);

                this.blendedWindow.getCanvas().setImage(imgdest);
                this.blendedWindow.getCanvas().repaint();
                this.blendedWindow.setVisible(true);

            }
        }


    }//GEN-LAST:event_jSliderBinaryOperationsStateChanged

    private void jSliderBinaryOperationsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jSliderBinaryOperationsFocusGained
    {//GEN-HEADEREND:event_jSliderBinaryOperationsFocusGained
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        InternalWindowImage viNext = (InternalWindowImage) this.desktop.selectFrame(false);

        if (vi != null && viNext != null)
        {

            this.blendedWindow = new InternalWindowImage();
            this.blendedWindow.setParent(this);
            this.blendedWindow.setLocation(vi.getX() + 25, vi.getY() + 25);

            this.blendedWindow.setTitle("Imagenes mezcladas");
            this.desktop.add(this.blendedWindow);

            this.imgTmp = vi.getCanvas().getImage(false);
            this.imgTmp2Blend = viNext.getCanvas().getImage(false);

        }

    }//GEN-LAST:event_jSliderBinaryOperationsFocusGained

    private void jSliderBinaryOperationsMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderBinaryOperationsMouseExited
    {//GEN-HEADEREND:event_jSliderBinaryOperationsMouseExited
        this.imgTmp = null;
        this.imgTmp2Blend = null;
        this.blendedWindow = null;

    }//GEN-LAST:event_jSliderBinaryOperationsMouseExited

    private void jButtonTintedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonTintedActionPerformed
    {//GEN-HEADEREND:event_jButtonTintedActionPerformed
        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                TintOp tint = new TintOp(Config.GENERALCONFIG.getSelectedFrontColor(), 0.5f);
                tint.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonTintedActionPerformed

    private void jCheckBoxMenuItemToolBarImageRotationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxMenuItemToolBarImageRotationActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxMenuItemToolBarImageRotationActionPerformed
        this.jToolBarImageRotation.setVisible(jCheckBoxMenuItemToolBarImageRotation.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemToolBarImageRotationActionPerformed

    private void jToggleButtonRecordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonRecordActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonRecordActionPerformed

        if (!jToggleButtonRecord.isSelected())
        {
            this.audioRecorder.stop();
            this.timer.stop();


            JFileChooser dlg = new JFileChooser();

            // Establecemos como nombre del fichero el nombre de la ventana
            dlg.setSelectedFile(new File("nueva grabacion.wav"));

            dlg.setFileFilter(new FileNameExtensionFilter("Audio WAV (*.wav)", "wav"));
            dlg.setAcceptAllFileFilterUsed(false);

            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION)

            try
            {

                File f = getSelectedFileWithExtension(dlg);

                String filename = f.getName();
                String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());

                // Comprobamos que le hayamos dado extenión y sea de las soportadas
                if (extension.length() == 0 || !("wav".equals(extension) || "gif".equals(extension)))
                {
                    // si no le ponemos fijo el formato jpg
                    extension = "wav";
                    f = new File(f.getAbsoluteFile() + ".wav");
                }


                audioTmp.renameTo(f);
                jToggleButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smm/images/icon_record.png")));
                jToggleButtonRecord.setToolTipText("Grabar");
                jLabelRecordTime.setText("00:00");


            } catch (Exception ex)
            {
                
            }


        } else
        {
            try
            {
                this.audioTmp = File.createTempFile("smmtmprecording", ".tmp");
            } catch (IOException ex)
            {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.audioRecorder = new SMSoundRecorder(this.audioTmp);
            this.audioRecorder.addLineListener(new AudioHandler());
            this.audioRecorder.record();

            this.timer = new Timer (1000, new ActionListener ()
            {
                private int totalSecs = 1;

                @Override
                public void actionPerformed(ActionEvent e)
                {
                    int minutes = (totalSecs % 3600) / 60;
                    int seconds = totalSecs % 60;

                    String timeString = String.format("%02d:%02d", minutes, seconds);

                    jLabelRecordTime.setText(timeString);
                    totalSecs++;
                 }
            });

            timer.start();

            jToggleButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smm/images/icon_stop.png")));
            jToggleButtonRecord.setToolTipText("Parar grabación...");

        }

    }//GEN-LAST:event_jToggleButtonRecordActionPerformed

    private void jButtonSnapShotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSnapShotActionPerformed
    {//GEN-HEADEREND:event_jButtonSnapShotActionPerformed

        JInternalFrame vi =  this.desktop.getSelectedFrame();
        BufferedImage img = null;

        if (vi != null)
            if ( vi instanceof InternalWindowWebCam )
                img = ((InternalWindowWebCam)vi).getFrame();
            else if ( vi instanceof InternalWindowVideoPlayer )
                img = ((InternalWindowVideoPlayer)vi).getFrame();

            if (img != null)
            {
                InternalWindowImage snapshotWindow = new InternalWindowImage();
                snapshotWindow.setParent(this);
                snapshotWindow.setLocation(vi.getX() + 25, vi.getY() + 25);
                desktop.add(snapshotWindow);
                snapshotWindow.setVisible(true);
                snapshotWindow.setTitle("Nueva imagen capturada");
                snapshotWindow.getCanvas().setImage(img);

            }

    }//GEN-LAST:event_jButtonSnapShotActionPerformed

    private void jButtonWebCamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonWebCamActionPerformed
    {//GEN-HEADEREND:event_jButtonWebCamActionPerformed

        if (this.webcamWindow == null)
        {




            this.webcamWindow = new InternalWindowWebCam();
           // this.webcamWindow.setParent(this);

            JInternalFrame vi =  this.desktop.getSelectedFrame();
            if (vi != null)
                this.webcamWindow.setLocation(vi.getX() + 25, vi.getY() + 25);

            this.webcamWindow.setTitle("WebCam");
            this.desktop.add(this.webcamWindow);
            this.setVisible(true);

        }

    }//GEN-LAST:event_jButtonWebCamActionPerformed

    private void desktopMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_desktopMouseMoved
    {//GEN-HEADEREND:event_desktopMouseMoved

    }//GEN-LAST:event_desktopMouseMoved

    private void desktopVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException//GEN-FIRST:event_desktopVetoableChange
    {//GEN-HEADEREND:event_desktopVetoableChange

        System.err.println(evt.getPropertyName());

    }//GEN-LAST:event_desktopVetoableChange

    private void jToggleButtonRoundRectangleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonRoundRectangleActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonRoundRectangleActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.ROUNDRECTANGLE);
        this.jStatusBarTool.setText("Rectangulo Redondeado");
    }//GEN-LAST:event_jToggleButtonRoundRectangleActionPerformed

    private void jToggleButtonCurveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonCurveActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonCurveActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.CURVE);
        this.jStatusBarTool.setText("Curva");
    }//GEN-LAST:event_jToggleButtonCurveActionPerformed

    private void jToggleButtonPolylineActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonPolylineActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonPolylineActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.POLYLINE);
        this.jStatusBarTool.setText("Polilinea");
    }//GEN-LAST:event_jToggleButtonPolylineActionPerformed

    private void jToggleButtonPolygonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonPolygonActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonPolygonActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.POLYGON);
        this.jStatusBarTool.setText("Poligono");
    }//GEN-LAST:event_jToggleButtonPolygonActionPerformed

    private void jSliderAlphaStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSliderAlphaStateChanged
    {//GEN-HEADEREND:event_jSliderAlphaStateChanged
        Config.GENERALCONFIG.setAlpha(jSliderAlpha.getValue());
        this.repaint();    }//GEN-LAST:event_jSliderAlphaStateChanged

    private void jToggleButtonNoFillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonNoFillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonNoFillActionPerformed
        Config.GENERALCONFIG.setFillColor(0);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((0));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonNoFillActionPerformed

    private void jToggleButtonSolidFillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonSolidFillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonSolidFillActionPerformed
        Config.GENERALCONFIG.setFillColor(1);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((1));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonSolidFillActionPerformed

    private void jToggleButtonHorizontalFillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonHorizontalFillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonHorizontalFillActionPerformed
        Config.GENERALCONFIG.setFillColor(2);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((2));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonHorizontalFillActionPerformed

    private void jToggleButtonVerticalFillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonVerticalFillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonVerticalFillActionPerformed
        Config.GENERALCONFIG.setFillColor(3);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((3));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonVerticalFillActionPerformed

    private void jButtonNegativeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNegativeActionPerformed
    {//GEN-HEADEREND:event_jButtonNegativeActionPerformed

        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {
                LookupTable ltp = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                LookupOp lop = new LookupOp(ltp, null);
                lop.filter(imgSource, imgSource);
                vi.getCanvas().repaint();
            } catch (Exception e)
            {
                System.err.println("Error");
            }

    }//GEN-LAST:event_jButtonNegativeActionPerformed

    private void jButtonGrayScaleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonGrayScaleActionPerformed
    {//GEN-HEADEREND:event_jButtonGrayScaleActionPerformed
        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {

                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                ColorConvertOp op = new ColorConvertOp(cs, null);

                BufferedImage imgdest = op.filter(imgSource, null);
                vi.getCanvas().setImage(imgdest);
                vi.getCanvas().repaint();

            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonGrayScaleActionPerformed

    private void jButtonRandomBlackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRandomBlackActionPerformed
    {//GEN-HEADEREND:event_jButtonRandomBlackActionPerformed
        BufferedImage imgSource;
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null && (imgSource = vi.getCanvas().getImage(false)) != null)
            try
            {

                RandomizerOp op = new RandomizerOp();

                BufferedImage imgdest = op.filter(imgSource, null);
                vi.getCanvas().setImage(imgdest);
                vi.getCanvas().repaint();

            } catch (Exception e)
            {
                System.err.println("Error");
            }
    }//GEN-LAST:event_jButtonRandomBlackActionPerformed

    private void jButtonDuplicateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDuplicateActionPerformed
    {//GEN-HEADEREND:event_jButtonDuplicateActionPerformed
        jMenuItemDuplicateImageActionPerformed(evt);
    }//GEN-LAST:event_jButtonDuplicateActionPerformed

    private void jToggleButtonRadialFillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonRadialFillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonRadialFillActionPerformed
        Config.GENERALCONFIG.setFillColor(4);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((4));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonRadialFillActionPerformed

    private void jToggleButtonDiagonal1FillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonDiagonal1FillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonDiagonal1FillActionPerformed
        Config.GENERALCONFIG.setFillColor(5);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((5));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonDiagonal1FillActionPerformed

    private void jToggleButtonDiagonal2FillActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonDiagonal2FillActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonDiagonal2FillActionPerformed
        Config.GENERALCONFIG.setFillColor(6);
        if (getSelectedShape() != null)
        {
            getSelectedShape().getConfig().setFillColor((6));
            repaint();
        }
    }//GEN-LAST:event_jToggleButtonDiagonal2FillActionPerformed

    private void jMenuItemCutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemCutActionPerformed
    {//GEN-HEADEREND:event_jMenuItemCutActionPerformed
        if (getSelectedShape() != null)
        {
            InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

            if (vi != null)
            {
                Canvas canvas = vi.getCanvas();
                if (canvas != null)
                {
                    this.clipBoardShape = canvas.Cut();
                    repaint();
                    jMenuItemPaste.setEnabled(true);
                    this.updateShapesList();

                }
            }

        }        
        
    }//GEN-LAST:event_jMenuItemCutActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemCopyActionPerformed
    {//GEN-HEADEREND:event_jMenuItemCopyActionPerformed
        if (getSelectedShape() != null)
        {
            InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

            if (vi != null)
            {
                Canvas canvas = vi.getCanvas();
                if (canvas != null)
                {
                    this.clipBoardShape = canvas.Copy();
                    repaint();
                    jMenuItemPaste.setEnabled(true);

                }
            }

        }        
           
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemPasteActionPerformed
    {//GEN-HEADEREND:event_jMenuItemPasteActionPerformed

            InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

            if (vi != null)
            {
                Canvas canvas = vi.getCanvas();
                if (canvas != null)
                {
                    canvas.Paste(this.clipBoardShape);
                    repaint();
                    this.updateShapesList();

                }
            }

       
        
        
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    public void updateShapesList()
    {
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            Canvas canvas = vi.getCanvas();
            if (canvas != null)
                  jListShapes.setListData(canvas.getShapes());

        }
    }
    
    private void jButtonMoveUpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonMoveUpActionPerformed
    {//GEN-HEADEREND:event_jButtonMoveUpActionPerformed

        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
        {
            Canvas canvas = vi.getCanvas();
            if (canvas != null)
            {
                int tmpindex = this.jListShapes.getSelectedIndex();

                canvas.MoveUp(this.jListShapes.getSelectedIndex());
                this.updateShapesList();
                
                this.jListShapes.setSelectedIndex(tmpindex+1);
            }
            

        }
        
    }//GEN-LAST:event_jButtonMoveUpActionPerformed

    private void jButtonMoveDownActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonMoveDownActionPerformed
    {//GEN-HEADEREND:event_jButtonMoveDownActionPerformed
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
        {
            Canvas canvas = vi.getCanvas();
            if (canvas != null)
            {
                int tmpindex = this.jListShapes.getSelectedIndex();
                
                canvas.MoveDown(this.jListShapes.getSelectedIndex());
                this.updateShapesList();
                
                this.jListShapes.setSelectedIndex(tmpindex-1);
            }
        }
    }//GEN-LAST:event_jButtonMoveDownActionPerformed

    private void jListShapesValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListShapesValueChanged
    {//GEN-HEADEREND:event_jListShapesValueChanged
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
        {
            Canvas canvas = vi.getCanvas();
            if (canvas != null)
            {

                canvas.setSelectedShape(jListShapes.getSelectedIndex());
                
            }
        }
        
    }//GEN-LAST:event_jListShapesValueChanged

    private void jToggleButtonArcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonArcActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.ARC);
        this.jStatusBarTool.setText("Arco");
    }//GEN-LAST:event_jToggleButtonArcActionPerformed

    private void jToggleButtonTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTextActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.TEXT);
        this.jStatusBarTool.setText("Texto");
    }//GEN-LAST:event_jToggleButtonTextActionPerformed

    private void jButtonFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFontActionPerformed
        JFontChooser fontChooser = new JFontChooser();
        int result = fontChooser.showDialog(this);
        if (result == JFontChooser.OK_OPTION)
        {
          Config.GENERALCONFIG.setFont(fontChooser.getSelectedFont());          
        } 
    }//GEN-LAST:event_jButtonFontActionPerformed

    public void setImageWindowActivated()
    {
        jPanelImageBinary.setEnabled(true);
        jPanelImageBrightness.setEnabled(true);
        jPanelImageContrast.setEnabled(true);
        jPanelImageFilter.setEnabled(true);
        jPanelImageOperations.setEnabled(true);
        jPanelImageRotate.setEnabled(true);
        jPanelStatusBar.setEnabled(true);
        jPanelUmbralization.setEnabled(true);
        jPanelZoom.setEnabled(true);

	jButton180.setEnabled(true);
        jButtonBinaryAdd.setEnabled(true);
        jButtonBinaryProduct.setEnabled(true);
        jButtonBinarySubstract.setEnabled(true);
        jButtonColorChooserFront.setEnabled(true);
        jButtonColorChooserBack.setEnabled(true);
        jButtonConstrast.setEnabled(true);
        jButtonConstrastBright.setEnabled(true);
        jButtonContrastDark.setEnabled(true);
        jButtonRotate270.setEnabled(true);
        jButtonRotate90.setEnabled(true);
        jButtonSave.setEnabled(true);
        jButtonSepia.setEnabled(true);
        jButtonSinus.setEnabled(true);
        jButtonSobel.setEnabled(true);
        jButtonTinted.setEnabled(true);
        jButtonNegative.setEnabled(true);
        jButtonGrayScale.setEnabled(true);
        jButtonRandomBlack.setEnabled(true);
        jButtonZoomMinus.setEnabled(true);
        jButtonZoomPlus.setEnabled(true);
        jComboBoxFilter.setEnabled(true);
        jSliderBinaryOperations.setEnabled(true);
        jSliderBrightness.setEnabled(true);
        jSliderRotate.setEnabled(true);
        jSliderUmbralization.setEnabled(true);

        jMenuSave.setEnabled(true);

        this.jButtonMoveDown.setEnabled(true);
        this.jButtonMoveUp.setEnabled(true);
        this.jListShapes.setEnabled(true);
        this.updateShapesList();
        
    }

    public void setImageWindowDeactivated()
    {
        jPanelImageBinary.setEnabled(false);
        jPanelImageBrightness.setEnabled(false);
        jPanelImageContrast.setEnabled(false);
        jPanelImageFilter.setEnabled(false);
        jPanelImageOperations.setEnabled(false);
        jPanelImageRotate.setEnabled(false);
        jPanelStatusBar.setEnabled(false);
        jPanelUmbralization.setEnabled(false);
        jPanelZoom.setEnabled(false);

        jButton180.setEnabled(false);
        jButtonBinaryAdd.setEnabled(false);
        jButtonBinaryProduct.setEnabled(false);
        jButtonBinarySubstract.setEnabled(false);
        jButtonColorChooserFront.setEnabled(false);
        jButtonColorChooserBack.setEnabled(false);
        jButtonConstrast.setEnabled(false);
        jButtonConstrastBright.setEnabled(false);
        jButtonContrastDark.setEnabled(false);
        jButtonRotate270.setEnabled(false);
        jButtonRotate90.setEnabled(false);
        jButtonSave.setEnabled(false);
        jButtonSepia.setEnabled(false);
        jButtonSinus.setEnabled(false);
        jButtonSobel.setEnabled(false);
        jButtonTinted.setEnabled(false);
        jButtonNegative.setEnabled(false);
        jButtonGrayScale.setEnabled(false);
        jButtonRandomBlack.setEnabled(false);


        jButtonZoomMinus.setEnabled(false);
        jButtonZoomPlus.setEnabled(false);
        jComboBoxFilter.setEnabled(false);
        jSliderBinaryOperations.setEnabled(false);
        jSliderBrightness.setEnabled(false);
        jSliderRotate.setEnabled(false);
        jSliderUmbralization.setEnabled(false);

        jMenuSave.setEnabled(false);
        
        this.jButtonMoveDown.setEnabled(false);
        this.jButtonMoveUp.setEnabled(false);
        this.jListShapes.setEnabled(false);
    }

    private void setContrast(int type)
    {
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
        {
            BufferedImage imgSource = vi.getCanvas().getImage(false);
            if (imgSource != null)
                try
                {
                    LookupTable lt = LookupTableProducer.createLookupTable(type);

                    LookupOp lop = new LookupOp(lt, null);

                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }

        }

    }

    private void scale(double scaleFactor)
    {
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            BufferedImage imgSource = vi.getCanvas().getImage(false);;
            if (imgSource == null)
                imgSource = vi.getCanvas().getImage(true);
            if (imgSource != null)
                try
                {
                    AffineTransform at = AffineTransform.getScaleInstance(scaleFactor, scaleFactor);
                    AffineTransformOp atop = new AffineTransformOp(at, 2);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getCanvas().setImage(imgdest);
                    vi.getCanvas().repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }
    }

    private void rotate(int angle)
    {

        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();
        if (vi != null)
        {
            double radians = Math.toRadians(angle);

            if (this.imgTmp == null)
                this.imgTmp = vi.getCanvas().getImage(false);
            if (this.imgTmp != null)
                try
                {
                    AffineTransform at = AffineTransform.getRotateInstance(radians, this.imgTmp.getWidth() / 2, this.imgTmp.getHeight() / 2);
                    AffineTransformOp atop = new AffineTransformOp(at, 2);
                    BufferedImage imgdest = atop.filter(this.imgTmp, null);
                    vi.getCanvas().setImage(imgdest);
                    vi.getCanvas().repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }
    }

    private void setCustomControlEvents()
    {
        // Instanciamos aquí el jButtonColorChooser ya que tiene que implementar el metodo colorChanged
        ((UI.ColorChooserButton) jButtonColorChooserFront).addColorChangedListener(new ColorChangedListener()
        {
            @Override
            public void colorChanged(Color newColor)
            {
                Config.GENERALCONFIG.setSelectedFrontColor(newColor);
                if (getSelectedShape() != null)
                {
                    getSelectedShape().getConfig().setSelectedFrontColor(newColor);
                    repaint();
                }

            }

        });

        // Instanciamos aquí el jButtonColorChooser ya que tiene que implementar el metodo colorChanged
        ((UI.ColorChooserButton) jButtonColorChooserBack).addColorChangedListener(new ColorChangedListener()
        {
            @Override
            public void colorChanged(Color newColor)
            {
                Config.GENERALCONFIG.setSelectedBackColor(newColor);
                if (getSelectedShape() != null)
                {
                    getSelectedShape().getConfig().setSelectedBackColor(newColor);
                    repaint();
                }

            }

        });

        // Instanciamos aquí el jButtonColorChooser ya que tiene que implementar el metodo colorChanged
        jPanelStroke.addItemListener(new java.awt.event.ItemListener()
        {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                Config.GENERALCONFIG.setStroke((Integer)jSpinnerStroke.getValue(), jPanelStroke.getSelectedIndex());
                if (getSelectedShape() != null)
                {
                    getSelectedShape().getConfig().setStroke((Integer)jSpinnerStroke.getValue(), jPanelStroke.getSelectedIndex());
                    repaint();
                }
            }
        });




    }

    /**
     * Funcion que calcula el seno
     * @param w el valor de que vamos a calcular el seno
     * @return la tabla de modificacion
     */
    private LookupTable sinus(double w)
    {
        double K = 255.0; // Cte de normalización
        // Código implementado f(x)=|sin(wx)|

        byte[] lt = new byte[256];
        for (int i = 0; i < 256; ++i)
            lt[i] = (byte)Math.abs(K * Math.sin( w * i ));

        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Pinta la posición del cursor en la barra de estado
     * @param text texto con la información a pintar
     */
    public void setCursorPosition(String text)
    {
        this.jStatusBarCursor.setText(text);
    }

    /**
     * Pintal el color capturado por el cursor en la barra de estado
     * @param color color a pintar en la barra de estado
     */
    public void setCursorPositionColor(Color color)
    {
        this.jStatusBarColor.setBackground(color);
        this.jStatusBarColor.setText("RGB:"+color.getRed()+","+color.getGreen()+","+color.getBlue());
    }

    public void addWindow(InternalWindowVideoPlayer vi)
    {

        this.desktop.add(vi);
    }

    private Shape getSelectedShape()
    {
        InternalWindowImage vi = (InternalWindowImage) this.desktop.getSelectedFrame();

        if (vi != null)
        {
            Canvas canvas = vi.getCanvas();
            if (canvas != null)
                return canvas.getSelectedShape();
        }
        return null;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton jButton180;
    private javax.swing.JButton jButtonBinaryAdd;
    private javax.swing.JButton jButtonBinaryProduct;
    private javax.swing.JButton jButtonBinarySubstract;
    private javax.swing.JButton jButtonColorChooserBack;
    private javax.swing.JButton jButtonColorChooserFront;
    private javax.swing.JButton jButtonConstrast;
    private javax.swing.JButton jButtonConstrastBright;
    private javax.swing.JButton jButtonContrastDark;
    private javax.swing.JButton jButtonDuplicate;
    private javax.swing.JButton jButtonFont;
    private javax.swing.JButton jButtonGrayScale;
    private javax.swing.ButtonGroup jButtonGroupFill;
    private javax.swing.ButtonGroup jButtonGroupTools;
    private javax.swing.JButton jButtonMoveDown;
    private javax.swing.JButton jButtonMoveUp;
    private javax.swing.JButton jButtonNegative;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonRandomBlack;
    private javax.swing.JButton jButtonRotate270;
    private javax.swing.JButton jButtonRotate90;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSepia;
    private javax.swing.JButton jButtonSinus;
    private javax.swing.JButton jButtonSnapShot;
    private javax.swing.JButton jButtonSobel;
    private javax.swing.JButton jButtonTinted;
    private javax.swing.JButton jButtonWebCam;
    private javax.swing.JButton jButtonZoomMinus;
    private javax.swing.JButton jButtonZoomPlus;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemStatusBar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBarImageOperations;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBarImageRotation;
    private javax.swing.JComboBox<String> jComboBoxFilter;
    private javax.swing.JLabel jLabelRecordTime;
    private javax.swing.JList<String> jListShapes;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemChangeSize;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemDuplicateImage;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemHelpAbout;
    private javax.swing.JMenuItem jMenuItemHistogram;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelCursorAndColor;
    private javax.swing.JPanel jPanelImageBinary;
    private javax.swing.JPanel jPanelImageBrightness;
    private javax.swing.JPanel jPanelImageContrast;
    private javax.swing.JPanel jPanelImageFilter;
    private javax.swing.JPanel jPanelImageOperations;
    private javax.swing.JPanel jPanelImageRotate;
    private javax.swing.JPanel jPanelStatusBar;
    private UI.StrokeChooserComboBox jPanelStroke;
    private javax.swing.JPanel jPanelUmbralization;
    private javax.swing.JPanel jPanelZoom;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JSlider jSliderAlpha;
    private javax.swing.JSlider jSliderBinaryOperations;
    private javax.swing.JSlider jSliderBrightness;
    private javax.swing.JSlider jSliderRotate;
    private javax.swing.JSlider jSliderUmbralization;
    private javax.swing.JSpinner jSpinnerStroke;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel jStatusBarColor;
    private javax.swing.JLabel jStatusBarCursor;
    private javax.swing.JLabel jStatusBarTool;
    private javax.swing.JToggleButton jToggleButtonAntialiasing;
    private javax.swing.JButton jToggleButtonArc;
    private javax.swing.JToggleButton jToggleButtonCurve;
    private javax.swing.JToggleButton jToggleButtonDiagonal1Fill;
    private javax.swing.JToggleButton jToggleButtonDiagonal2Fill;
    private javax.swing.JToggleButton jToggleButtonEllipse;
    private javax.swing.JToggleButton jToggleButtonHorizontalFill;
    private javax.swing.JToggleButton jToggleButtonLine;
    private javax.swing.JToggleButton jToggleButtonMove;
    private javax.swing.JToggleButton jToggleButtonNoFill;
    private javax.swing.JToggleButton jToggleButtonPoint;
    private javax.swing.JToggleButton jToggleButtonPolygon;
    private javax.swing.JToggleButton jToggleButtonPolyline;
    private javax.swing.JToggleButton jToggleButtonRadialFill;
    private javax.swing.JToggleButton jToggleButtonRecord;
    private javax.swing.JToggleButton jToggleButtonRectangle;
    private javax.swing.JToggleButton jToggleButtonRoundRectangle;
    private javax.swing.JToggleButton jToggleButtonSolidFill;
    private javax.swing.JToggleButton jToggleButtonText;
    private javax.swing.JToggleButton jToggleButtonVerticalFill;
    private javax.swing.JToolBar jToolBarImage;
    private javax.swing.JToolBar jToolBarImageRotation;
    private javax.swing.JToolBar jToolBarTools;
    // End of variables declaration//GEN-END:variables
}
