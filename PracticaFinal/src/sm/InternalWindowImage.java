package sm;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Robot;
import java.util.logging.Level;
import java.util.logging.Logger;
import GraphicsBasico2D.Config;
import UI.CanvasImage;

/**
 * Esta clase representa una ventana interna de imagen
 */
public class InternalWindowImage extends javax.swing.JInternalFrame
{

    private MainWindow parent;

    /**
     * Creates new form VentanaInterna
     */
    public InternalWindowImage()
    {
        initComponents();
    }

    /**
     * Devuelve el objeto Canvas
     * @return la instancia del objeto Canvas asociado a esta ventana
     */
    public CanvasImage getCanvas()
    {
        return this.canvas;
    }

    /**
     * Establece el padre de la ventana
     * @param w la instancia de MainWindow
     */
    public void setParent(MainWindow w)
    {
        this.parent = w;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        canvas = new UI.CanvasImage();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(200, 200));
        setPreferredSize(new java.awt.Dimension(600, 400));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeactivated(evt);
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );

        jScrollPane.setViewportView(canvas);

        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Controla cuando el ratón ha entrado en el lienzo para pintar la posición
     * @param evt el evento del ratón
     */
    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        
        try
        {
            Robot robot = new Robot();
            Color color = robot.getPixelColor(evt.getXOnScreen(), evt.getYOnScreen());
            this.parent.setCursorPositionColor(color);
            
            this.parent.updateShapesList();
           
        } catch (AWTException ex)
        {
            Logger.getLogger(InternalWindowImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.parent.setCursorPosition("(" + evt.getX() + "," + evt.getY() + ") ");

        if (Config.GENERALCONFIG.getSelectedTool() == Config.Tool.HAND)
            this.setCursor(new Cursor(java.awt.Cursor.MOVE_CURSOR));
        else
            this.setCursor(new Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

    }//GEN-LAST:event_canvasMouseMoved
    
    /**
     * Controla cuando el ratón ha salido del lienzo para dejar de pintar la posición
     * @param evt el evento del ratón
     */
    private void canvasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseExited
        this.parent.setCursorPosition("(x,y)");
        this.parent.setCursorPositionColor(Color.BLACK);
        this.setCursor(new Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_canvasMouseExited

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameActivated
    {//GEN-HEADEREND:event_formInternalFrameActivated
        this.parent.setImageWindowActivated();
    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameDeactivated
    {//GEN-HEADEREND:event_formInternalFrameDeactivated
        this.parent.setImageWindowDeactivated();
    }//GEN-LAST:event_formInternalFrameDeactivated

    private void canvasMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvasMouseReleased
    {//GEN-HEADEREND:event_canvasMouseReleased
        this.parent.updateShapesList();
    }//GEN-LAST:event_canvasMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private UI.CanvasImage canvas;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables
}
