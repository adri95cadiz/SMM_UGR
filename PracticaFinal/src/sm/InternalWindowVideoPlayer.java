/*
 * Copyright (C) 2017 Adri
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package sm;

import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.media.Buffer;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;

/**
 * @author adri
 * Muestra una ventana de repreoduccion de video, basada en las clases de jmf
 * 
 */
public class InternalWindowVideoPlayer extends javax.swing.JInternalFrame
{

    /**
     * Funcion est√°tica para controlar cuando da error al abrir un video
     *
     * @param f el fichero a abrir
     * @return una instancia de InternalWindowVideoPlayer
     */
    public static InternalWindowVideoPlayer getInstance(File f)
    {
        InternalWindowVideoPlayer v = new InternalWindowVideoPlayer(f);
        if (v.player != null)
            return v;
        else
            return null;
    }

    private Player player;

    /**
     * Creates new form InternalWindowVideoPlayer
     * @param f el fichero a reproducir
     */
    private InternalWindowVideoPlayer(File f)
    {
        initComponents();

        String sfichero = "file:" + f.getAbsolutePath();
        MediaLocator ml = new MediaLocator(sfichero);
        try
        {
            player = Manager.createRealizedPlayer(ml);
            Component vc = player.getVisualComponent();
            if (vc != null)
                add(vc, java.awt.BorderLayout.CENTER);
            Component cpc = player.getControlPanelComponent();
            if (cpc != null)
                add(cpc, java.awt.BorderLayout.SOUTH);
            this.pack();
        } catch (Exception e)
        {
            System.err.println("VentanaInternaJMFPlayer: " + e);
            player = null;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setClosable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(300, 300));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosing
    {//GEN-HEADEREND:event_formInternalFrameClosing

        this.player.stop();
        this.player = null;
    }//GEN-LAST:event_formInternalFrameClosing

    /**
     * Nos devuelve un objeto BufferedImage con una captura del video
     * @return un objeto BufferedImage
     */
    public BufferedImage getFrame()
    {

        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl";
        fgc = (FrameGrabbingControl) player.getControl(claseCtr);
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti = new BufferToImage((VideoFormat) bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage) img;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
