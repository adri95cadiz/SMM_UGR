package practica7;

import GraphicsBasico2D.Shape;
import java.awt.Color;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import GraphicsBasico2D.Config;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import UI.ColorChooserButton.ColorChangedListener;
import java.awt.Cursor;
import java.awt.Point;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Adri
 */
public class MainWindow extends javax.swing.JFrame {
    
    private Shape selectedShape = null;
    private Shape copiedShape = null;

    public int imageHeight = 300;
    public int imageWidth = 400;
    private int ndocument = 1; // aqui guardamos el numero de documento para el titulo
    
    /**
     * Creates new form VentanaPrincipal
     */
    public MainWindow() {
        initComponents();
     
        // Instanciamos aqu√≠ el jButtonColorChooser ya que tiene que implementar el metodo colorChanged
        ((UI.ColorChooserButton)jButtonColorChooser).addColorChangedListener(new ColorChangedListener() {
            @Override
            public void colorChanged(Color newColor) {
                Config.GENERALCONFIG.setSelectedColor(newColor);
            }
        
        });
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroupTools = new javax.swing.ButtonGroup();
        jToolBarTools = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jToggleButtonPoint = new javax.swing.JToggleButton();
        jToggleButtonLine = new javax.swing.JToggleButton();
        jToggleButtonRectangle = new javax.swing.JToggleButton();
        jToggleButtonEllipse = new javax.swing.JToggleButton();
        jToggleButtonMove = new javax.swing.JToggleButton();
        jToggleButtonSelection = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButtonColorChooser = new UI.ColorChooserButton(Color.BLACK);
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jSpinnerStroke = new javax.swing.JSpinner();
        jToggleButtonFillColor = new javax.swing.JToggleButton();
        jToggleButtonAntialiasing = new javax.swing.JToggleButton();
        jToggleButtonAlpha = new javax.swing.JToggleButton();
        jPanelCenter = new javax.swing.JPanel();
        escritorio = new javax.swing.JDesktopPane();
        jPanelStatusBar = new javax.swing.JPanel();
        jStatusBarCursor = new javax.swing.JLabel();
        jStatusBarTool = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuPrint = new javax.swing.JMenu();
        jMenuItemPrinter = new javax.swing.JMenuItem();
        jMenuItemFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jCheckBoxMenuItemToolBar = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemStatusBar = new javax.swing.JCheckBoxMenuItem();
        jMenuImage = new javax.swing.JMenu();
        jMenuItemChangeSize = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 500));

        jToolBarTools.setRollover(true);

        jButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_new.png"))); // NOI18N
        jButtonNew.setToolTipText("Nuevo");
        jButtonNew.setFocusable(false);
        jButtonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonNew);

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_open.png"))); // NOI18N
        jButtonOpen.setToolTipText("Abrir");
        jButtonOpen.setFocusable(false);
        jButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonOpen);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_save.png"))); // NOI18N
        jButtonSave.setToolTipText("Guardar");
        jButtonSave.setFocusable(false);
        jButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonSave);
        jToolBarTools.add(jSeparator3);

        jButtonGroupTools.add(jToggleButtonPoint);
        jToggleButtonPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_point.png"))); // NOI18N
        jToggleButtonPoint.setSelected(true);
        jToggleButtonPoint.setToolTipText("Punto");
        jToggleButtonPoint.setFocusable(false);
        jToggleButtonPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPointActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonPoint);

        jButtonGroupTools.add(jToggleButtonLine);
        jToggleButtonLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_line.png"))); // NOI18N
        jToggleButtonLine.setToolTipText("Linea");
        jToggleButtonLine.setFocusable(false);
        jToggleButtonLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonLineActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonLine);

        jButtonGroupTools.add(jToggleButtonRectangle);
        jToggleButtonRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_rectangle.png"))); // NOI18N
        jToggleButtonRectangle.setToolTipText("Rectangulo");
        jToggleButtonRectangle.setFocusable(false);
        jToggleButtonRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRectangleActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonRectangle);

        jButtonGroupTools.add(jToggleButtonEllipse);
        jToggleButtonEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_ellipse.png"))); // NOI18N
        jToggleButtonEllipse.setToolTipText("Elipse");
        jToggleButtonEllipse.setFocusable(false);
        jToggleButtonEllipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonEllipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonEllipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonEllipseActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonEllipse);

        jButtonGroupTools.add(jToggleButtonMove);
        jToggleButtonMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_move.png"))); // NOI18N
        jToggleButtonMove.setToolTipText("Mover");
        jToggleButtonMove.setFocusable(false);
        jToggleButtonMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMoveActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonMove);

        jButtonGroupTools.add(jToggleButtonSelection);
        jToggleButtonSelection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_selection.png"))); // NOI18N
        jToggleButtonSelection.setToolTipText("Selecci√≥n");
        jToggleButtonSelection.setFocusable(false);
        jToggleButtonSelection.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonSelection.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSelectionActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonSelection);
        jToolBarTools.add(jSeparator4);

        jButtonColorChooser.setToolTipText("Color");
        jButtonColorChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonColorChooser.setBorderPainted(false);
        jButtonColorChooser.setFocusable(false);
        jButtonColorChooser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonColorChooser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorChooserActionPerformed(evt);
            }
        });
        jToolBarTools.add(jButtonColorChooser);
        jToolBarTools.add(jSeparator5);

        jSpinnerStroke.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));
        jSpinnerStroke.setToolTipText("Grosor de linea");
        jSpinnerStroke.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerStroke, ""));
        jSpinnerStroke.setFocusable(false);
        jSpinnerStroke.setValue(1);
        jSpinnerStroke.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerStrokeStateChanged(evt);
            }
        });
        jToolBarTools.add(jSpinnerStroke);

        jToggleButtonFillColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_fill.png"))); // NOI18N
        jToggleButtonFillColor.setToolTipText("Rellenar");
        jToggleButtonFillColor.setFocusable(false);
        jToggleButtonFillColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonFillColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonFillColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonFillColorActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonFillColor);

        jToggleButtonAntialiasing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_antialiasing.png"))); // NOI18N
        jToggleButtonAntialiasing.setToolTipText("Suavizado");
        jToggleButtonAntialiasing.setFocusable(false);
        jToggleButtonAntialiasing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonAntialiasing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonAntialiasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAntialiasingActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonAntialiasing);

        jToggleButtonAlpha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_alpha.png"))); // NOI18N
        jToggleButtonAlpha.setToolTipText("Transparencia");
        jToggleButtonAlpha.setFocusable(false);
        jToggleButtonAlpha.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonAlpha.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonAlpha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAlphaActionPerformed(evt);
            }
        });
        jToolBarTools.add(jToggleButtonAlpha);

        getContentPane().add(jToolBarTools, java.awt.BorderLayout.PAGE_START);

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 785, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        jPanelCenter.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelStatusBar.setLayout(new java.awt.BorderLayout());

        jStatusBarCursor.setText("(x,y)");
        jStatusBarCursor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelStatusBar.add(jStatusBarCursor, java.awt.BorderLayout.EAST);

        jStatusBarTool.setText("Barra Estado");
        jStatusBarTool.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelStatusBar.add(jStatusBarTool, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanelStatusBar, java.awt.BorderLayout.SOUTH);

        jMenuFile.setText("Archivo");

        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        jMenuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_new.png"))); // NOI18N
        jMenuItemNew.setText("Nuevo");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_open.png"))); // NOI18N
        jMenuOpen.setText("Abrir");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuOpen);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        jMenuSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_save.png"))); // NOI18N
        jMenuSave.setText("Guardar");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuSave);
        jMenuFile.add(jSeparator2);

        jMenuPrint.setText("Imprimir");

        jMenuItemPrinter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_print.png"))); // NOI18N
        jMenuItemPrinter.setText("Impresora");
        jMenuPrint.add(jMenuItemPrinter);

        jMenuItemFile.setText("Fichero");
        jMenuPrint.add(jMenuItemFile);

        jMenuFile.add(jMenuPrint);
        jMenuFile.add(jSeparator1);

        jMenuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_exit.png"))); // NOI18N
        jMenuItemExit.setText("Salir");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Editar");

        jMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_cut.png"))); // NOI18N
        jMenuItemCut.setText("Cortar");
        jMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCutActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCut);

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_copy.png"))); // NOI18N
        jMenuItemCopy.setText("Copiar");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCopy);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7/images/icon_paste.png"))); // NOI18N
        jMenuItemPaste.setText("Pegar");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemPaste);

        jMenuBar.add(jMenuEdit);

        jMenuView.setText("Ver");

        jCheckBoxMenuItemToolBar.setSelected(true);
        jCheckBoxMenuItemToolBar.setText("Barra de herramientas");
        jCheckBoxMenuItemToolBar.setToolTipText("");
        jCheckBoxMenuItemToolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemToolBarActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemToolBar);

        jCheckBoxMenuItemStatusBar.setSelected(true);
        jCheckBoxMenuItemStatusBar.setText("Barra de estado");
        jCheckBoxMenuItemStatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemStatusBarActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemStatusBar);

        jMenuBar.add(jMenuView);

        jMenuImage.setText("Imagen");

        jMenuItemChangeSize.setText("Cambiar tama√±o");
        jMenuItemChangeSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChangeSizeActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemChangeSize);

        jMenuBar.add(jMenuImage);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        // TODO add your handling code here:
        
        InternalWindow vi = new InternalWindow();
        
        // Truquillo para mostrar las ventanas en cascada, le sumamos 25 pixeles a la nueva
        InternalWindow selectedWindow = (InternalWindow)this.escritorio.getSelectedFrame();
        if (selectedWindow != null) 
        {
            vi.setLocation(selectedWindow.getX() + 25, selectedWindow.getY() + 25);
        }
        
        
        
        vi.setParent(this);
        escritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nueva imagen " + String.valueOf(this.ndocument));
        
        this.ndocument++;
        
        BufferedImage img = new BufferedImage(this.imageWidth, this.imageHeight, BufferedImage.TYPE_INT_RGB);

        // le ponemos el color blanco (si no saldr√≠a negra)
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, img.getWidth(), img.getHeight()));

        vi.getCanvas().setImage(img);
        
        
        
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    
    public Shape getSelectedShape() {
        return selectedShape;
    }

    public void setSelectedShape(Shape shape) {
        this.selectedShape = shape;
    }
    
    public Shape getCopiedShape() {
        return copiedShape;
    }

    public void setCopiedShape(Shape shape) {
        this.copiedShape = shape;
    }
    
    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        // TODO add your handling code here:
        
        JFileChooser dlg = new JFileChooser();
        
        dlg.setFileFilter(new FileNameExtensionFilter("Imagen GIF (*.gif)", "gif"));
        dlg.setFileFilter(new FileNameExtensionFilter("Imagen PNG (*.png)", "png"));          
        dlg.setFileFilter(new FileNameExtensionFilter("Imagen JPEG (*.jpg, *.jpeg)", "jpg", "jpeg"));
        dlg.setFileFilter(new FileNameExtensionFilter("Todos los tipos de imagenes (*.jpg, *.jpeg, *.png, *.gif)", "jpg", "jpeg", "png", "gif"));
        
        dlg.setAcceptAllFileFilterUsed(false);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
            //CoÃÅdigo 
        
            InternalWindow vi = new InternalWindow();
            vi.setParent(this);
            escritorio.add(vi);
            vi.setVisible(true);
            
            BufferedImage img;
            try 
            {
                img = ImageIO.read(f);
                vi.getCanvas().setImage(img);
                vi.setTitle(f.getName());
            } catch (IOException ex) 
            {
                JOptionPane.showMessageDialog(null, "Error al abrir la imagen");
            }
            
            
            
            
        }
        
        
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed

       
        InternalWindow vi=(InternalWindow) escritorio.getSelectedFrame();
        
        if (vi != null) 
        {
            JFileChooser dlg = new JFileChooser();
            
            // Establecemos como nombre del fichero el nombre de la ventana
            dlg.setSelectedFile(new File(vi.getTitle()));
            
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen GIF (*.gif)", "gif"));
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen PNG (*.png)", "png"));          
            dlg.setFileFilter(new FileNameExtensionFilter("Imagen JPEG (*.jpg)", "jpg"));
            
            dlg.setAcceptAllFileFilterUsed(false);
           
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) 
            {
  
                try 
                {
                    BufferedImage img = vi.getCanvas().getImage(true);
                    if (img != null) 
                    {
                        File f = getSelectedFileWithExtension(dlg);
                        
                        String filename = f.getName();
                        String extension = filename.substring(filename.lastIndexOf(".")+1,filename.length());

                        // Comprobamos que le hayamos dado exteni√≥n y sea de las soportadas
                        if (extension.length() == 0 || !( "jpg".equals(extension) || "png".equals(extension) || "gif".equals(extension) ) )
                        {
                            // si no le ponemos fijo el formato jpg
                            extension = "jpg";
                            f = new File( f.getAbsoluteFile() + ".jpg");
                        }                        

                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                    }
                }catch (Exception ex) 
                {
                    JOptionPane.showMessageDialog(null, "Error al guardar la imagen");
                }
            }
        }
        
    }//GEN-LAST:event_jMenuSaveActionPerformed

    /**
    * Obtiene el archivo seleccionado con la extensi√≥n del filter
     * @param c la instancia del filechooser
     * @return El nombre del fichero
    */
    public File getSelectedFileWithExtension(JFileChooser c) 
    {
        File file = c.getSelectedFile();
        if (c.getFileFilter() instanceof FileNameExtensionFilter) 
        {
            String[] exts = ((FileNameExtensionFilter)c.getFileFilter()).getExtensions();
            String nameLower = file.getName().toLowerCase();
            for (String ext : exts)  // check if it already has a valid extension
            {
                if (nameLower.endsWith('.' + ext.toLowerCase())) 
                {
                    return file; // if yes, return as-is
                }
            }
            // if not, append the first extension from the selected filter
            file = new File(file.toString() + '.' + exts[0]);
        }
        return file;
    }

    private void jCheckBoxMenuItemStatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemStatusBarActionPerformed
        this.jStatusBarTool.setVisible(jCheckBoxMenuItemStatusBar.getState());     
    }//GEN-LAST:event_jCheckBoxMenuItemStatusBarActionPerformed

    private void jToggleButtonPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPointActionPerformed
        
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.POINT);
        this.jStatusBarTool.setText("Punto");
    }//GEN-LAST:event_jToggleButtonPointActionPerformed

    private void jToggleButtonLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonLineActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.LINE);
        this.jStatusBarTool.setText("Linea");
    }//GEN-LAST:event_jToggleButtonLineActionPerformed

    private void jToggleButtonRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRectangleActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.RECTANGLE);
        this.jStatusBarTool.setText("Rectangulo");
    }//GEN-LAST:event_jToggleButtonRectangleActionPerformed

    private void jToggleButtonEllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonEllipseActionPerformed
       Config.GENERALCONFIG.setSelectedTool(Config.Tool.ELLIPSE);
        this.jStatusBarTool.setText("Elipse");
    }//GEN-LAST:event_jToggleButtonEllipseActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jToggleButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMoveActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.HAND);
        this.jStatusBarTool.setText("Mover");
    }//GEN-LAST:event_jToggleButtonMoveActionPerformed

    private void jSpinnerStrokeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerStrokeStateChanged
        Config.GENERALCONFIG.setStroke((Integer)(jSpinnerStroke.getValue()));
    }//GEN-LAST:event_jSpinnerStrokeStateChanged

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        this.jMenuItemNewActionPerformed(evt);
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        this.jMenuOpenActionPerformed(evt);
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        this.jMenuSaveActionPerformed(evt);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jToggleButtonFillColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonFillColorActionPerformed
        Config.GENERALCONFIG.setFillColor(jToggleButtonFillColor.isSelected());
    }//GEN-LAST:event_jToggleButtonFillColorActionPerformed

    private void jCheckBoxMenuItemToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemToolBarActionPerformed
        this.jToolBarTools.setVisible(jCheckBoxMenuItemToolBar.getState());
    }//GEN-LAST:event_jCheckBoxMenuItemToolBarActionPerformed

    private void jToggleButtonAntialiasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAntialiasingActionPerformed
        Config.GENERALCONFIG.setAntialiasing(jToggleButtonAntialiasing.isSelected());
        this.repaint();
    }//GEN-LAST:event_jToggleButtonAntialiasingActionPerformed

    private void jToggleButtonAlphaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAlphaActionPerformed
        Config.GENERALCONFIG.setAlpha(jToggleButtonAlpha.isSelected());
        this.repaint();
    }//GEN-LAST:event_jToggleButtonAlphaActionPerformed

    private void jMenuItemChangeSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChangeSizeActionPerformed
        JFrame sizeWindow = new SizeWindow(this, this.imageHeight, this.imageWidth);        
        sizeWindow.setVisible(true);        
    }//GEN-LAST:event_jMenuItemChangeSizeActionPerformed

    private void jButtonColorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonColorChooserActionPerformed

    private void jMenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCutActionPerformed
        InternalWindow selectedWindow = (InternalWindow)this.escritorio.getSelectedFrame();
        if(selectedWindow != null){
            selectedShape = selectedWindow.getCanvas().getSelectedShape();
            selectedWindow.getCanvas().getShapes().remove(selectedWindow.getCanvas().getSelectedShape());
        }
        if(selectedShape != null) {
            copiedShape = selectedShape;
            this.repaint();
        }
    }//GEN-LAST:event_jMenuItemCutActionPerformed

    private void jToggleButtonSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonSelectionActionPerformed
        Config.GENERALCONFIG.setSelectedTool(Config.Tool.SELECT);
        this.jStatusBarTool.setText("Seleccionar");
    }//GEN-LAST:event_jToggleButtonSelectionActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        InternalWindow selectedWindow=(InternalWindow) escritorio.getSelectedFrame();
        if(selectedWindow != null){
            try {
                selectedShape = selectedWindow.getCanvas().getSelectedShape().clone();
            } catch (CloneNotSupportedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(selectedShape != null) {
            copiedShape = selectedShape;
            this.repaint();
        }
        System.out.println(selectedShape.toString() + copiedShape.toString());
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        InternalWindow selectedWindow = (InternalWindow) escritorio.getSelectedFrame();        
        if(copiedShape != null && selectedWindow != null) {
            try {
                copiedShape = copiedShape.clone();
                copiedShape.setLocation(new Point((int) getMousePosition().getX() - 8,(int) getMousePosition().getY() - 89));
                selectedWindow.getCanvas().getShapes().add(copiedShape);
                this.repaint();
            } catch (CloneNotSupportedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println(selectedShape.toString() + copiedShape.toString());
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    public void setCursorPosition(String text)
    {
        this.jStatusBarCursor.setText(text);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton jButtonColorChooser;
    private javax.swing.ButtonGroup jButtonGroupTools;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemStatusBar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemToolBar;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemChangeSize;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemFile;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemPrinter;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JMenu jMenuPrint;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelStatusBar;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JSpinner jSpinnerStroke;
    private javax.swing.JLabel jStatusBarCursor;
    private javax.swing.JLabel jStatusBarTool;
    private javax.swing.JToggleButton jToggleButtonAlpha;
    private javax.swing.JToggleButton jToggleButtonAntialiasing;
    private javax.swing.JToggleButton jToggleButtonEllipse;
    private javax.swing.JToggleButton jToggleButtonFillColor;
    private javax.swing.JToggleButton jToggleButtonLine;
    private javax.swing.JToggleButton jToggleButtonMove;
    private javax.swing.JToggleButton jToggleButtonPoint;
    private javax.swing.JToggleButton jToggleButtonRectangle;
    private javax.swing.JToggleButton jToggleButtonSelection;
    private javax.swing.JToolBar jToolBarTools;
    // End of variables declaration//GEN-END:variables
}
